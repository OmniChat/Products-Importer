"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Parse = require("parse/node");
class Chat extends Parse.Object {
    constructor(attributes) {
        super('Chat', attributes);
    }
    /** The omnichat customer associated to this chat */
    get customer() { return this.get('customer'); }
    set customer(value) { this.set('customer', value); }
    /** Current salesperson responsible for chatting with the associated customer */
    get salesPerson() { return this.get('salesPerson'); }
    set salesPerson(value) { this.set('salesPerson', value); }
    /** Current salesperson responsible for chatting with the associated customer */
    get currentOrder() { return this.get('currentOrder'); }
    set currentOrder(value) { this.set('currentOrder', value); }
    /** The number of underead messages related tthis chat*/
    get unreadMessagesCount() { return this.get('unreadMessagesCount'); }
    set unreadMessagesCount(value) { this.set('unreadMessagesCount', value); }
    /** The retailer this chat belongs to */
    get retailer() { return this.get('retailer'); }
    set retailer(value) { this.set('retailer', value); }
    /** When the customer send the first message a support request is created before the chat gets associated to a sales person */
    get customerSupportRequest() { return this.get('customerSupportRequest'); }
    set customerSupportRequest(value) { this.set('customerSupportRequest', value); }
    /** All previous customer support requestes that this chat recevied **/
    get previousCustomerSupportRequests() { return this.get('previousCustomerSupportRequests'); }
    set previousCustomerSupportRequests(value) { this.set('previousCustomerSupportRequests', value); }
    /** The unique facebook id related to the facebook user that this chat is related to */
    get platform() { return this.get('platform'); }
    set platform(value) { this.set('platform', value); }
    /** Additional Facebook information related to the facebook customer */
    get meta() { return this.get('meta'); }
    set meta(value) { this.set('meta', value); }
    /**
     * The unique facebook id related to the facebook user that this chat is related to
     * The id is unique per facebook page, will not going to have duplications between
     * distinct retaliers
  
     * */
    get fbMessengerId() { return this.get('fbMessengerId'); }
    set fbMessengerId(value) { this.set('fbMessengerId', value); }
    /** The whatsapp phone this chat is related to */
    get whatsAppId() { return this.get('whatsAppId'); }
    set whatsAppId(value) { this.set('whatsAppId', value); }
    /** The last message associated with this chat  */
    get lastMessage() { return this.get('lastMessage'); }
    set lastMessage(value) { this.set('lastMessage', value); }
    /** The date that the last message associated with this chat was sent  */
    get lastMessageDate() { return this.get('lastMessageDate'); }
    set lastMessageDate(value) { this.set('lastMessageDate', value); }
    /** Attomically increment the unread message count */
    incrementUnreadMessagesCount() {
        this.increment('unreadMessagesCount');
    }
}
exports.Chat = Chat;
Parse.Object.registerSubclass('Chat', Chat);
//# sourceMappingURL=Chat.js.map