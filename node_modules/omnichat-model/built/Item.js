"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Parse = require("parse/node");
class Item extends Parse.Object {
    constructor(attributes) {
        super('Item', attributes);
    }
    get quantity() { return this.get('quantity'); }
    set quantity(value) { this.set('quantity', value); }
    get detail() { return this.get('detail'); }
    set detail(value) { this.set('detail', value); }
    get price() { return this.get('price'); }
    set price(value) { this.set('price', value); }
    get product() { return this.get('product'); }
    set product(value) { this.set('product', value); }
    get productReference() { return this.get('productReference'); }
    set productReference(value) { this.set('productReference', value); }
    get variant() { return this.get('variant'); }
    set variant(value) { this.set('variant', value); }
    get weight() { return this.get('weight'); }
    set weight(value) { this.set('weight', value); }
    get length() { return this.get('length'); }
    set length(value) { this.set('length', value); }
    get height() { return this.get('height'); }
    set height(value) { this.set('height', value); }
    get width() { return this.get('width'); }
    set width(value) { this.set('width', value); }
    /**
     * Whether this item is a service. This will affect freight and checkout layout
     * This fields comes from Product.service
     * */
    get service() { return this.get('service'); }
    set service(value) { this.set('service', value); }
    imageUrl() {
        let image;
        if (this.variant) {
            if (this.variant.externalImageURL) {
                image = this.variant.externalImageURL;
            }
            else if (this.variant.image) {
                image = this.variant.image.url();
            }
        }
        return image;
    }
    thumbnailUrl() {
        let image;
        if (this.variant) {
            if (this.variant.externalImageURL) {
                image = this.variant.externalImageURL;
            }
            else if (this.variant.thumbnail) {
                image = this.variant.thumbnail.url();
            }
        }
        return image;
    }
}
exports.Item = Item;
Parse.Object.registerSubclass('Item', Item);
//# sourceMappingURL=Item.js.map