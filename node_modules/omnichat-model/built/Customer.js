"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Parse = require("parse/node");
class Customer extends Parse.Object {
    constructor(attributes) {
        super('Customer', attributes);
    }
    get name() { return this.get('name'); }
    set name(value) { this.set('name', value); }
    get lastName() { return this.get('lastName'); }
    set lastName(value) { this.set('lastName', value); }
    get fullName() { return this.get('fullName'); }
    set fullName(value) { this.set('fullName', value); }
    get acceptsMarketing() { return this.get('acceptsMarketing'); }
    set acceptsMarketing(value) { this.set('acceptsMarketing', value); }
    get email() { return this.get('email'); }
    set email(value) { this.set('email', value); }
    get phoneAreaCode() { return this.get('phoneAreaCode'); }
    set phoneAreaCode(value) { this.set('phoneAreaCode', value); }
    get phoneCountryCode() { return this.get('phoneCountryCode'); }
    set phoneCountryCode(value) { this.set('phoneCountryCode', value); }
    get phoneNumber() { return this.get('phoneNumber'); }
    set phoneNumber(value) { this.set('phoneNumber', value); }
    get businessName() { return this.get('businessName'); }
    set businessName(value) { this.set('businessName', value); }
    get birthDate() { return this.get('birthDate'); }
    set birthDate(value) { this.set('birthDate', value); }
    get businessAccount() { return this.get('businessAccount'); }
    set businessAccount(value) { this.set('businessAccount', value); }
    // IE
    get stateTaxId() { return this.get('stateTaxId'); }
    set stateTaxId(value) { this.set('stateTaxId', value); }
    // CNPJ
    get businessTaxId() { return this.get('businessTaxId'); }
    set businessTaxId(value) { this.set('businessTaxId', value); }
    // CPF
    get taxDocumentNumber() { return this.get('taxDocumentNumber'); }
    set taxDocumentNumber(value) { this.set('taxDocumentNumber', value); }
    get retailer() { return this.get('retailer'); }
    set retailer(value) { this.set('retailer', value); }
    get address() { return this.get('address'); }
    set address(value) { this.set('address', value); }
    get savedCreditCard() { return this.get('savedCreditCard'); }
    set savedCreditCard(value) { this.set('savedCreditCard', value); }
    /** id referente a este objeto quando integrado com um gateway externo */
    get externalId() { return this.get('externalId'); }
    set externalId(value) { this.set('externalId', value); }
    /** Url for the customer picture. Example Facebook profile picture */
    get externalImageUrl() { return this.get('externalImageUrl'); }
    set externalImageUrl(value) { this.set('externalImageUrl', value); }
    /** The gender of this customer */
    get gender() { return this.get('gender'); }
    set gender(value) { this.set('gender', value); }
    /** If the account.customerBaseSegmentation is true then this  */
    get salesPerson() { return this.get('salesPerson'); }
    set salesPerson(value) { this.set('salesPerson', value); }
}
exports.Customer = Customer;
Parse.Object.registerSubclass('Customer', Customer);
//# sourceMappingURL=Customer.js.map