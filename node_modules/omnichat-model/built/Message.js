"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Parse = require("parse/node");
class Message extends Parse.Object {
    constructor(attributes) {
        super('Message', attributes);
    }
    /** Time of update (epoch time in milliseconds) */
    get timestamp() { return this.get('timestamp'); }
    set timestamp(value) { this.set('timestamp', value); }
    /** Sequence number */
    // get seq(): number { return this.get('seq') }
    // set seq(value: number) { this.set('seq', value) }
    /** Unique external message id */
    get externalId() { return this.get('externalId'); }
    set externalId(value) { this.set('externalId', value); }
    /** Text of message */
    get text() { return this.get('text'); }
    set text(value) { this.set('text', value); }
    /** Status of message */
    get status() { return this.get('status'); }
    set status(value) { this.set('status', value); }
    /** Message sent automatically by omnichat */
    get system() { return this.get('system'); }
    set system(value) { this.set('system', value); }
    /** The chat that message belongs to */
    get chat() { return this.get('chat'); }
    set chat(value) { this.set('chat', value); }
    /** Type of message */
    get type() { return this.get('type'); }
    set type(value) { this.set('type', value); }
    /**
     * The message attachment.
     * Only OUTGOING messages have this proporty set
     * */
    get attachment() { return this.get('attachment'); }
    set attachment(value) { this.set('attachment', value); }
    /**
     * The message attachment url
     * Only INCOMING messages have this proporty set
     * For OUTGOING messages use attachment
     */
    get attachmentUrl() { return this.get('attachmentUrl'); }
    set attachmentUrl(value) { this.set('attachmentUrl', value); }
    /**
     * The message attachment url
     * Only type === LOCATION
     */
    get location() { return this.get('location'); }
    set location(value) { this.set('location', value); }
    /** The salesperson that sent this message */
    get salesPerson() { return this.get('salesPerson'); }
    set salesPerson(value) { this.set('salesPerson', value); }
    /** The order related to this message when type === ORDER */
    get order() { return this.get('order'); }
    set order(value) { this.set('order', value); }
    /** The product related to this message when type === PRODUCT */
    get product() { return this.get('product'); }
    set product(value) { this.set('product', value); }
    /** The variant related to this message when type === VARIANT */
    get variant() { return this.get('variant'); }
    set variant(value) { this.set('variant', value); }
    get error() { return this.get('error'); }
    set error(value) { this.set('error', value); }
}
exports.Message = Message;
Parse.Object.registerSubclass('Message', Message);
//# sourceMappingURL=Message.js.map