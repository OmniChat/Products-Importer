"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Parse = require("parse/node");
class Order extends Parse.Object {
    constructor(attributes) {
        super('Order', attributes);
    }
    get statusChanges() { return this.get('statusChanges'); }
    set statusChanges(value) { this.set('statusChanges', value); }
    get canAcceptBoleto() { return this.get('canAcceptBoleto'); }
    set canAcceptBoleto(value) { this.set('canAcceptBoleto', value); }
    /** How the boleto will be created for this order */
    get boletoInstructions() { return this.get('boletoInstructions'); }
    set boletoInstructions(value) { this.set('boletoInstructions', value); }
    get canAcceptCreditCard() { return this.get('canAcceptCreditCard'); }
    set canAcceptCreditCard(value) { this.set('canAcceptCreditCard', value); }
    /** How the credit card payment will be created for this order */
    get creditCardInstructions() { return this.get('creditCardInstructions'); }
    set creditCardInstructions(value) { this.set('creditCardInstructions', value); }
    get customer() { return this.get('customer'); }
    set customer(value) { this.set('customer', value); }
    get deliveryTime() { return this.get('deliveryTime'); }
    set deliveryTime(value) { this.set('deliveryTime', value); }
    get freightCost() { return this.get('freightCost'); }
    set freightCost(value) { this.set('freightCost', value); }
    /**
     * When the retailer.freightCalculation.mode is set to Automatic then the
     * salesperson may choose to adjust the shipping cost on his own
     */
    get freightCostAdjusted() { return this.get('freightCostAdjusted'); }
    set freightCostAdjusted(value) { this.set('freightCostAdjusted', value); }
    /**  How the discount has been applied.*/
    get discountMode() { return this.get('discountMode'); }
    set discountMode(value) { this.set('discountMode', value); }
    /**  The discount, regardless the discountMode it is always abosolute.*/
    get discount() { return this.get('discount'); }
    set discount(value) { this.set('discount', value); }
    get installmentsWithoutInterest() { return this.get('installmentsWithoutInterest'); }
    set installmentsWithoutInterest(value) { this.set('installmentsWithoutInterest', value); }
    /** Installments that the customer have chosen to pay for this order */
    get paymentInstallmentsCount() { return this.get('paymentInstallmentsCount'); }
    set paymentInstallmentsCount(value) { this.set('paymentInstallmentsCount', value); }
    get items() { return this.get('items'); }
    set items(value) { this.set('items', value); }
    get notes() { return this.get('notes'); }
    set notes(value) { this.set('notes', value); }
    get pickUpInStore() { return this.get('pickUpInStore'); }
    set pickUpInStore(value) { this.set('pickUpInStore', value); }
    get retailer() { return this.get('retailer'); }
    set retailer(value) { this.set('retailer', value); }
    get retailerOrderId() { return this.get('retailerOrderId'); }
    get user() { return this.get('user'); }
    set user(value) { this.set('user', value); }
    get shippingAddress() { return this.get('shippingAddress'); }
    set shippingAddress(value) { this.set('shippingAddress', value); }
    get shippingMethod() { return this.get('shippingMethod'); }
    set shippingMethod(value) { this.set('shippingMethod', value); }
    get salesPerson() { return this.get('salesPerson'); }
    set salesPerson(value) { this.set('salesPerson', value); }
    get paymentMethod() { return this.get('paymentMethod'); }
    set paymentMethod(value) { this.set('paymentMethod', value); }
    get status() { return this.get('status'); }
    set status(value) { this.set('status', value); }
    get statusTracking() { return this.get('statusTracking'); }
    set statusTracking(value) { this.set('statusTracking', value); }
    get orderGwId() { return this.get('orderGwId'); }
    set orderGwId(value) { this.set('orderGwId', value); }
    /** id referente a este objeto quando integrado com um gateway externo */
    get externalId() { return this.get('externalId'); }
    set externalId(value) { this.set('externalId', value); }
    /** id referente a este objeto quando integrado com um gateway externo */
    get parentOrder() { return this.get('parentOrder'); }
    set parentOrder(value) { this.set('parentOrder', value); }
    /** id referente a este objeto quando integrado com um gateway externo */
    get isInternational() { return this.get('isInternational'); }
    set isInternational(value) { this.set('isInternational', value); }
    totalAmountItems() {
        return this.subtotal();
    }
    subtotal() {
        let total = 0;
        for (var i = 0; i < this.items.length; i++) {
            const item = this.items[i];
            total += item.price * item.quantity;
        }
        return total;
    }
    total() {
        let total = this.subtotal();
        if (this.freightCost) {
            total += this.freightCost;
        }
        if (this.discount) {
            total -= this.discount;
        }
        return total;
    }
}
exports.Order = Order;
Parse.Object.registerSubclass('Order', Order);
//# sourceMappingURL=Order.js.map