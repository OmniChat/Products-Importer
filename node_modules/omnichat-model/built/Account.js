"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Parse = require("parse/node");
var AccountPlans;
(function (AccountPlans) {
    AccountPlans["Trial"] = "TRIAL";
    AccountPlans["Classic"] = "CLASSIC";
    AccountPlans["Professional"] = "PROFESSIONAL";
    AccountPlans["Enterprise"] = "ENTERPRISE";
})(AccountPlans = exports.AccountPlans || (exports.AccountPlans = {}));
var AccountBillingPeriod;
(function (AccountBillingPeriod) {
    AccountBillingPeriod["Month"] = "MONTH";
    AccountBillingPeriod["Year"] = "YEAR";
})(AccountBillingPeriod = exports.AccountBillingPeriod || (exports.AccountBillingPeriod = {}));
var PaymentMethod;
(function (PaymentMethod) {
    PaymentMethod["Boleto"] = "Boleto";
    PaymentMethod["CreditCard"] = "CreditCard";
})(PaymentMethod = exports.PaymentMethod || (exports.PaymentMethod = {}));
var PricingTableMode;
(function (PricingTableMode) {
    PricingTableMode["Customer"] = "CUSTOMER";
    PricingTableMode["SalesPerson"] = "SALESPERSON";
    PricingTableMode["Order"] = "ORDER";
})(PricingTableMode = exports.PricingTableMode || (exports.PricingTableMode = {}));
var InactiveReason;
(function (InactiveReason) {
    InactiveReason["Payment"] = "PAYMENT";
})(InactiveReason = exports.InactiveReason || (exports.InactiveReason = {}));
var FieldConfig;
(function (FieldConfig) {
    FieldConfig["disabled"] = "DISABLED";
    FieldConfig["available"] = "AVAILABLE";
    FieldConfig["required"] = "REQUIRED";
})(FieldConfig = exports.FieldConfig || (exports.FieldConfig = {}));
class Account extends Parse.Object {
    constructor(attributes) {
        super('Account', Account);
    }
    get memberSince() { return this.get('memberSince'); }
    set memberSince(value) { this.set('memberSince', value); }
    /** The name of the current retailer plan */
    get plan() { return this.get('plan'); }
    set plan(value) { this.set('plan', value); }
    /** The name of the current retailer plan */
    get paymentMethod() { return this.get('paymentMethod'); }
    set paymentMethod(value) { this.set('paymentMethod', value); }
    /** The name of the current retailer plan */
    get billingPeriod() { return this.get('billingPeriod'); }
    set billingPeriod(value) { this.set('billingPeriod', value); }
    get billingDay() { return this.get('billingDay'); }
    set billingDay(value) { this.set('billingDay', value); }
    /** logs all plan changes requested by the retailer */
    get planChanges() { return this.get('planChanges'); }
    set planChanges(value) { this.set('planChanges', value); }
    /** how many days this retailer have left on trial */
    get trialRemainingDays() { return this.get('trialRemainingDays'); }
    set trialRemainingDays(value) { this.set('trialRemainingDays', value); }
    get inactive() { return this.get('inactive'); }
    set inactive(value) { this.set('inactive', value); }
    get inactiveReason() { return this.get('inactiveReason'); }
    set inactiveReason(value) { this.set('inactiveReason', value); }
    get inactiveSince() { return this.get('inactiveSince'); }
    set inactiveSince(value) { this.set('inactiveSince', value); }
    /** Feature: Wheather this store has the Collection available */
    get collections() { return this.get('collections'); }
    set collections(value) { this.set('collections', value); }
    /** Feature: Wheather this store can sell outside brazil available */
    get internationalSale() { return this.get('internationalSale'); }
    set internationalSale(value) { this.set('internationalSale', value); }
    /** Feature: Wheather this store can be use API */
    get api() { return this.get('api'); }
    set api(value) { this.set('api', value); }
    /**
     * number of users that this retailer have configured based on the contracted plan
     * */
    get planUsers() { return this.get('planUsers'); }
    set planUsers(value) { this.set('planUsers', value); }
    /**
     * number of users that this store have requested
     * */
    get additionalUsers() { return this.get('additionalUsers'); }
    set additionalUsers(value) { this.set('additionalUsers', value); }
    get additionalUsersCost() { return this.get('additionalUsersCost'); }
    set additionalUsersCost(value) { this.set('additionalUsersCost', value); }
    get unlimitedUsers() { return this.get('unlimitedUsers'); }
    set unlimitedUsers(value) { this.set('unlimitedUsers', value); }
    /** logs all additionalUsers changes requested by the retailer */
    get additionalUsersChanges() { return this.get('additionalUsersChanges'); }
    set additionalUsersChanges(value) { this.set('additionalUsersChanges', value); }
    /** Customer segmentation per salesPerson is available*/
    get customerBaseSegmentation() { return this.get('customerBaseSegmentation'); }
    set customerBaseSegmentation(value) { this.set('customerBaseSegmentation', value); }
    /** Retailer has chat feature*/
    get chat() { return this.get('whatsapp'); }
    set chat(value) { this.set('whatsapp', value); }
    /** Customer segmentation per salesPerson is available*/
    get whatsapp() { return this.get('whatsapp'); }
    set whatsapp(value) { this.set('whatsapp', value); }
    /** Feature: Wheather this store has the Facebook Messenger available */
    get fbMessenger() { return this.get('fbMessenger'); }
    set fbMessenger(value) { this.set('fbMessenger', value); }
    /**
   * Enables pricing tables for this retailer. See PricingTable class
   * */
    get pricingTables() { return this.get('pricingTables'); }
    set pricingTables(value) { this.set('pricingTables', value); }
    /**
    * Enables pricing tables for this retailer. See PricingTable class
    * */
    get orderLineItem() { return this.get('orderLineItem'); }
    set orderLineItem(value) { this.set('orderLineItem', value); }
    /**
    * Enables pricing tables for this retailer. See PricingTable class
    * */
    get orderDiscount() { return this.get('orderDiscount'); }
    set orderDiscount(value) { this.set('orderDiscount', value); }
    /**
    * Customer fields - defines which fields will be presented and
    * whether they are mandatory or not.
    * */
    get customerFields() { return this.get('customerFields'); }
    set customerFields(value) { this.set('customerFields', value); }
}
exports.Account = Account;
Parse.Object.registerSubclass('Account', Account);
//# sourceMappingURL=Account.js.map