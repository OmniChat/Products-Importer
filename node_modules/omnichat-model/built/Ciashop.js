"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Parse = require("parse/node");
class Ciashop extends Parse.Object {
    constructor(attributes) {
        super('Ciashop', attributes);
    }
    get webhookIds() { return this.get('webhookIds'); }
    set webhookIds(value) { this.set('webhookIds', value); }
    get variantPlaceHolderId() { return this.get('variantPlaceHolderId'); }
    set variantPlaceHolderId(value) { this.set('variantPlaceHolderId', value); }
    get defaultDepartmentId() { return this.get('defaultDepartmentId'); }
    set defaultDepartmentId(value) { this.set('defaultDepartmentId', value); }
    get status() { return this.get('status'); }
    set status(value) { this.set('status', value); }
    get importationStatus() { return this.get('importationStatus'); }
    set importationStatus(value) { this.set('importationStatus', value); }
    get customersLastUpdatedAt() { return this.get('customersLastUpdatedAt'); }
    set customersLastUpdatedAt(value) { this.set('customersLastUpdatedAt', value); }
    get productsLastUpdatedAt() { return this.get('productsLastUpdatedAt'); }
    set productsLastUpdatedAt(value) { this.set('productsLastUpdatedAt', value); }
    /** Features that are not enable by default */
    get additionalFeatures() { return this.get('additionalFeatures'); }
    set additionalFeatures(value) { this.set('additionalFeatures', value); }
    /** Most recent updatedAt property received from the synced PricingTable objects */
    get pricingTablesLastUpdatedAt() { return this.get('pricingTablesLastUpdatedAt'); }
    set pricingTablesLastUpdatedAt(value) { this.set('pricingTablesLastUpdatedAt', value); }
    get retailerURL() { return this.get('retailerURL'); }
    set retailerURL(value) { this.set('retailerURL', value); }
    /**
     * Ciashop product has three prices: price, salePrice and promotionPrice.
     * The promotion price is a result of a external promotion rule which OmniChat
     * does not have access to. Therefor is up to the store to enable it or not.
     * The default value is false
     *
     * @type {boolean}
     * @memberof Ciashop
     */
    get usePromotionPrice() { return this.get('usePromotionPrice'); }
    set usePromotionPrice(value) { this.set('usePromotionPrice', value); }
    get errorDescription() { return this.get('errorDescription'); }
    set errorDescription(value) { this.set('errorDescription', value); }
    get ciashopSecure() { return this.get('ciashopSecure'); }
    set ciashopSecure(value) { this.set('ciashopSecure', value); }
    /**
     * Webhooks will be discarted, store will be only updated bia nightly sync
     */
    get webhookDisabled() { return this.get('webhookDisabled'); }
    set webhookDisabled(value) { this.set('webhookDisabled', value); }
}
exports.Ciashop = Ciashop;
Parse.Object.registerSubclass('Ciashop', Ciashop);
//# sourceMappingURL=Ciashop.js.map