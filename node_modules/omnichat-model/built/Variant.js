"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Parse = require("parse/node");
class Variant extends Parse.Object {
    constructor(attributes) {
        super('Variant', attributes);
    }
    get weight() { return this.get('weight'); }
    set weight(value) { this.set('weight', value); }
    get length() { return this.get('length'); }
    set length(value) { this.set('length', value); }
    get height() { return this.get('height'); }
    set height(value) { this.set('height', value); }
    get width() { return this.get('width'); }
    set width(value) { this.set('width', value); }
    get price() { return this.get('price'); }
    set price(value) { this.set('price', value); }
    get salePrice() { return this.get('salePrice'); }
    set salePrice(value) { this.set('salePrice', value); }
    get saleStartDate() { return this.get('saleStartDate'); }
    set saleStartDate(value) { this.set('saleStartDate', value); }
    get saleEndDate() { return this.get('saleEndDate'); }
    set saleEndDate(value) { this.set('saleEndDate', value); }
    get quantity() { return this.get('quantity'); }
    set quantity(value) { this.set('quantity', value); }
    get erpId() { return this.get('erpId'); }
    set erpId(value) { this.set('erpId', value); }
    get definition1Value() { return this.get('definition1Value'); }
    set definition1Value(value) { this.set('definition1Value', value); }
    get definition2Value() { return this.get('definition2Value'); }
    set definition2Value(value) { this.set('definition2Value', value); }
    get thumbnail() { return this.get('thumbnail'); }
    set thumbnail(value) { this.set('thumbnail', value); }
    get image() { return this.get('image'); }
    set image(value) { this.set('image', value); }
    get externalImageURL() { return this.get('externalImageURL'); }
    set externalImageURL(value) { this.set('externalImageURL', value); }
    /** id referente a este objeto quando integrado com um gateway externo */
    get externalId() { return this.get('externalId'); }
    set externalId(value) { this.set('externalId', value); }
    /**
     * This variant will not be presented when showing available product variants
     * When undefined the variant is considered visible.
     * */
    get visible() { return this.get('visible'); }
    set visible(value) { this.set('visible', value); }
    imageUrl() {
        let image;
        if (this.externalImageURL) {
            image = this.externalImageURL;
        }
        else if (this.image) {
            image = this.image.url();
        }
        return image;
    }
    thumbnailUrl() {
        let image;
        if (this.externalImageURL) {
            image = this.externalImageURL;
        }
        else if (this.thumbnail) {
            image = this.thumbnail.url();
        }
        return image;
    }
}
exports.Variant = Variant;
Parse.Object.registerSubclass('Variant', Variant);
//# sourceMappingURL=Variant.js.map