"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Parse = require("parse/node");
class Product extends Parse.Object {
    constructor(attributes) {
        super('Product', attributes);
    }
    get mainVariant() { return this.get('mainVariant'); }
    set mainVariant(value) { this.set('mainVariant', value); }
    get variants() { return this.get('variants'); }
    set variants(value) { this.set('variants', value); }
    get productDescription() { return this.get('productDescription'); }
    set productDescription(value) { this.set('productDescription', value); }
    get name() { return this.get('name'); }
    set name(value) { this.set('name', value); }
    /** The name of the the definition 1. Ex: Memory size */
    get definition1() { return this.get('definition1'); }
    set definition1(value) { this.set('definition1', value); }
    /** The possible values for the definition 1. Ex: 16Gb, 32GB */
    get definition1Values() { return this.get('definition1Values'); }
    set definition1Values(value) { this.set('definition1Values', value); }
    /** The name of the the definition 2. Ex: Color */
    get definition2() { return this.get('definition2'); }
    set definition2(value) { this.set('definition2', value); }
    /** The possible values for the definition 2. Ex: Black, Silver */
    get definition2Values() { return this.get('definition2Values'); }
    set definition2Values(value) { this.set('definition2Values', value); }
    get erpId() { return this.get('erpId'); }
    set erpId(value) { this.set('erpId', value); }
    get retailer() { return this.get('retailer'); }
    set retailer(value) { this.set('retailer', value); }
    /** id referente a este objeto quando integrado com um gateway externo */
    get externalId() { return this.get('externalId'); }
    set externalId(value) { this.set('externalId', value); }
    /**
     * Indicates that this product is blocked for sale.
     * Cannot be added to a order and will not be presented in any user search
     * When undefined the product is not considered blocked.
     * default is false
     * */
    get blocked() { return this.get('blocked'); }
    set blocked(value) { this.set('blocked', value); }
    /**
     * Whether this product is a service.
     * This will affect freight and checkout layout
     * default is false
     * */
    get service() { return this.get('service'); }
    set service(value) { this.set('service', value); }
    /**
     * OmniChat will control de inventory.
     * Applies when Retailer.ProductGateway is set to OMNICHAT
     * Saved order will decrease variant.quanitty and
     * Cancelled or Not_Paid order will return the stock to variant.quantity
     * default is false
     * */
    get trackInventory() { return this.get('trackInventory'); }
    set trackInventory(value) { this.set('trackInventory', value); }
    /**
     * Set to yes to allow this product to be sold without variant.quantity
     * Only applies when trackInventory is set to true.
     * default is false
     * */
    get sellOutOfStock() { return this.get('sellOutOfStock'); }
    set sellOutOfStock(value) { this.set('sellOutOfStock', value); }
    /**
     * The date that this probduct was imported via Google Shopping XML
     */
    get googleXMLImportingDate() { return this.get('googleXMLImportingDate'); }
    set googleXMLImportingDate(value) { this.set('googleXMLImportingDate', value); }
}
exports.Product = Product;
Parse.Object.registerSubclass('Product', Product);
//# sourceMappingURL=Product.js.map