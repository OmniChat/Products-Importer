"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Parse = require("parse/node");
var ProductsGateway;
(function (ProductsGateway) {
    ProductsGateway["OmniChat"] = "OMNICHAT";
    ProductsGateway["Ciashop"] = "CIASHOP";
    ProductsGateway["GoogleXML"] = "GoogleXML";
})(ProductsGateway = exports.ProductsGateway || (exports.ProductsGateway = {}));
class Retailer extends Parse.Object {
    constructor(attributes) {
        super('Retailer', attributes);
    }
    get name() { return this.get('name'); }
    set name(value) { this.set('name', value); }
    get canonicalName() { return this.get('canonicalName'); }
    set canonicalName(value) { this.set('canonicalName', value); }
    get moip() { return this.get('moip'); }
    set moip(value) { this.set('moip', value); }
    get website() { return this.get('website'); }
    set website(value) { this.set('website', value); }
    get paymentGateway() { return this.get('paymentGateway'); }
    set paymentGateway(value) { this.set('paymentGateway', value); }
    get orderGateway() { return this.get('orderGateway'); }
    set orderGateway(value) { this.set('orderGateway', value); }
    get productsGateway() { return this.get('productsGateway'); }
    set productsGateway(value) { this.set('productsGateway', value); }
    get customerGateway() { return this.get('customerGateway'); }
    set customerGateway(value) { this.set('customerGateway', value); }
    get boletoGateway() { return this.get('boletoGateway'); }
    set boletoGateway(value) { this.set('boletoGateway', value); }
    get ciashop() { return this.get('ciashop'); }
    set ciashop(value) { this.set('ciashop', value); }
    get fiscalAddress() { return this.get('fiscalAddress'); }
    set fiscalAddress(value) { this.set('fiscalAddress', value); }
    // Termos que cliente deve aceitar na compra dos produtos ou servi√ßos
    get productTerms() { return this.get('productTerms'); }
    set productTerms(value) { this.set('productTerms', value); }
    get phoneCountry() { return this.get('phoneCountry'); }
    set phoneCountry(value) { this.set('phoneCountry', value); }
    get phoneAreaCode() { return this.get('phoneAreaCode'); }
    set phoneAreaCode(value) { this.set('phoneAreaCode', value); }
    get phoneNumber() { return this.get('phoneNumber'); }
    set phoneNumber(value) { this.set('phoneNumber', value); }
    get account() { return this.get('account'); }
    set account(value) { this.set('account', value); }
    get signup() { return this.get('signup'); }
    set signup(value) { this.set('signup', value); }
    get logo() { return this.get('logo'); }
    set logo(value) { this.set('logo', value); }
    get icon() { return this.get('icon'); }
    set icon(value) { this.set('icon', value); }
    get mainActivity() { return this.get('mainActivity'); }
    set mainActivity(value) { this.set('mainActivity', value); }
    get tradingHours() { return this.get('tradingHours'); }
    set tradingHours(value) { this.set('tradingHours', value); }
    get taxDocumentNumber() { return this.get('taxDocumentNumber'); }
    set taxDocumentNumber(value) { this.set('taxDocumentNumber', value); }
    // TBD - need to create BoletoConfig class
    // get boletoConfig(): BoletoConfig { return this.get('boletoConfig') }
    // set boletoConfig(value: BoletoConfig) { this.set('boletoConfig', value) }
    get lastUniqueOrderId() { return this.get('lastUniqueOrderId'); }
    set lastUniqueOrderId(value) { this.set('lastUniqueOrderId', value); }
    get freightCalculation() { return this.get('freightCalculation'); }
    set freightCalculation(value) { this.set('freightCalculation', value); }
    get whatsapp() { return this.get('whatsapp'); }
    set whatsapp(value) { this.set('whatsapp', value); }
    // The unique Id used by omnichat integration to keep retailer in sync with the pipedrive related entry
    get pipeDriveOrganizationId() { return this.get('pipeDriveId'); }
    set pipeDriveOrganizationId(value) { this.set('pipeDriveId', value); }
}
exports.Retailer = Retailer;
Parse.Object.registerSubclass('Retailer', Retailer);
//# sourceMappingURL=Retailer.js.map