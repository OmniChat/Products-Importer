import Parse = require("parse/node");
import { Customer } from './Customer';
import { Item } from './Item';
import { Retailer } from './Retailer';
import { User } from './User';
import { Address } from './Address';
import { Note } from './Note';
import { OmniChatSchema } from './Schema'

type OrderBoletoInstructions = {
  dueDate: Date,
  installments: number // max number of installments
}

type CreditCardInstructions = {
  installments: number // max number of installments
}

interface StatusChange {
  status: OmniChatSchema.OrderStatus
  responsible: string
  message: string
  updatedAt: Date
}

export class Order extends Parse.Object {
  constructor(attributes?: any) {
    super('Order', attributes)
  }

  get statusChanges(): Array<StatusChange> { return this.get('statusChanges') }
  set statusChanges(value: Array<StatusChange>) { this.set('statusChanges', value) }

  get canAcceptBoleto(): boolean { return this.get('canAcceptBoleto') }
  set canAcceptBoleto(value: boolean) { this.set('canAcceptBoleto', value) }

  /** How the boleto will be created for this order */
  get boletoInstructions(): OrderBoletoInstructions { return this.get('boletoInstructions') }
  set boletoInstructions(value: OrderBoletoInstructions) { this.set('boletoInstructions', value) }

  get canAcceptCreditCard(): boolean { return this.get('canAcceptCreditCard') }
  set canAcceptCreditCard(value: boolean) { this.set('canAcceptCreditCard', value) }

  /** How the credit card payment will be created for this order */
  get creditCardInstructions(): OmniChatSchema.CreditCardInstructions { return this.get('creditCardInstructions') }
  set creditCardInstructions(value: OmniChatSchema.CreditCardInstructions) { this.set('creditCardInstructions', value) }

  get customer(): Customer { return this.get('customer') }
  set customer(value: Customer) { this.set('customer', value) }

  get deliveryTime(): string { return this.get('deliveryTime') }
  set deliveryTime(value: string) { this.set('deliveryTime', value) }

  get freightCost(): number { return this.get('freightCost') }
  set freightCost(value: number) { this.set('freightCost', value) }

  /** 
   * When the retailer.freightCalculation.mode is set to Automatic then the
   * salesperson may choose to adjust the shipping cost on his own
   */
  get freightCostAdjusted(): number { return this.get('freightCostAdjusted') }
  set freightCostAdjusted(value: number) { this.set('freightCostAdjusted', value) }

  /**  How the discount has been applied.*/
  get discountMode(): OmniChatSchema.OrderDiscountMode { return this.get('discountMode') }
  set discountMode(value: OmniChatSchema.OrderDiscountMode) { this.set('discountMode', value) }

  /**  The discount, regardless the discountMode it is always abosolute.*/
  get discount(): number { return this.get('discount') }
  set discount(value: number) { this.set('discount', value) }

  get installmentsWithoutInterest(): number { return this.get('installmentsWithoutInterest') }
  set installmentsWithoutInterest(value: number) { this.set('installmentsWithoutInterest', value) }

  /** Installments that the customer have chosen to pay for this order */
  get paymentInstallmentsCount(): number { return this.get('paymentInstallmentsCount') }
  set paymentInstallmentsCount(value: number) { this.set('paymentInstallmentsCount', value) }

  get items(): Array<Item> { return this.get('items') }
  set items(value: Array<Item>) { this.set('items', value) }

  get notes(): Array<Note> { return this.get('notes') }
  set notes(value: Array<Note>) { this.set('notes', value) }

  get pickUpInStore(): boolean { return this.get('pickUpInStore') }
  set pickUpInStore(value: boolean) { this.set('pickUpInStore', value) }

  get retailer(): Retailer { return this.get('retailer') }
  set retailer(value: Retailer) { this.set('retailer', value) }

  get retailerOrderId(): string { return this.get('retailerOrderId') }

  get user(): User { return this.get('user') }
  set user(value: User) { this.set('user', value) }

  get shippingAddress(): Address { return this.get('shippingAddress') }
  set shippingAddress(value: Address) { this.set('shippingAddress', value) }

  get shippingMethod(): string { return this.get('shippingMethod') }
  set shippingMethod(value: string) { this.set('shippingMethod', value) }

  get salesPerson(): User { return this.get('salesPerson') }
  set salesPerson(value: User) { this.set('salesPerson', value) }

  get paymentMethod(): OmniChatSchema.PaymentMethod { return this.get('paymentMethod') }
  set paymentMethod(value: OmniChatSchema.PaymentMethod) { this.set('paymentMethod', value) }

  get status(): OmniChatSchema.OrderStatus { return this.get('status') }
  set status(value: OmniChatSchema.OrderStatus) { this.set('status', value) }

  get statusTracking(): OmniChatSchema.OrderStatusTracking { return this.get('statusTracking') }
  set statusTracking(value: OmniChatSchema.OrderStatusTracking) { this.set('statusTracking', value) }

  get orderGwId(): string { return this.get('orderGwId') }
  set orderGwId(value: string) { this.set('orderGwId', value) }

  /** id referente a este objeto quando integrado com um gateway externo */
  get externalId(): string { return this.get('externalId') }
  set externalId(value: string) { this.set('externalId', value) }

  /** id referente a este objeto quando integrado com um gateway externo */
  get parentOrder(): Order { return this.get('parentOrder') }
  set parentOrder(value: Order) { this.set('parentOrder', value) }

  /** id referente a este objeto quando integrado com um gateway externo */
  get isInternational(): boolean { return this.get('isInternational') }
  set isInternational(value: boolean) { this.set('isInternational', value) }

  totalAmountItems() {
    return this.subtotal()
  }

  subtotal(): number {
    let total = 0;
    for (var i = 0; i < this.items.length; i++) {
      const item = this.items[i];
      total += item.price * item.quantity;
    }
    return total;
  }

  total(): number {
    let total = this.subtotal()
    if (this.freightCost) { total += this.freightCost }
    if (this.discount) { total -= this.discount }
    return total
  }
}

Parse.Object.registerSubclass('Order', Order);