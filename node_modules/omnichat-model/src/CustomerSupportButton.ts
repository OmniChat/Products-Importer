import Parse = require("parse/node");
import { OmniChatSchema } from './Schema'

import { Retailer } from './Retailer';
import { User } from './User';

export enum QueueingMode {
  Sequential = "SEQUENTIAL",
  Random = "RANDOM",
  Disabled = "DISABLED",
  SingleNumber = 'SINGLE_NUMBER',

  // Only available when retailer.whatsapp.ready === true
  IntegratedSingleNumber = 'INTEGRATED_SINGLE_NUMBER'
}

export class CustomerSupportButton extends Parse.Object {
  constructor(attributes?: any) {
    super('CustomerSupportButton', attributes)
  }

  get tradingHours(): object { return this.get('tradingHours') }
  set tradingHours(value: object) { this.set('tradingHours', value) }

  get retailer(): Retailer { return this.get('retailer') }
  set retailer(value: Retailer) { this.set('retailer', value) }

  get afterHoursMessage(): string { return this.get('afterHoursMessage') }
  set afterHoursMessage(value: string) { this.set('afterHoursMessage', value) }

  get afterHoursMessageEnable(): boolean { return this.get('afterHoursMessageEnable') }
  set afterHoursMessageEnable(value: boolean) { this.set('afterHoursMessageEnable', value) }

  get closingReasonOptions(): Array<string> { return this.get('closingReasonOptions') }
  set closingReasonOptions(value: Array<string>) { this.set('closingReasonOptions', value) }


  /**
   * Apenas em uso para o botão do WhatsApp direct.
   * 
   */

  /* Apenas valido quando queueingMode === SingleNumber*/
  get singleCountryCode(): string { return this.get('singleCountryCode') }
  set singleCountryCode(value: string) { this.set('singleCountryCode', value) }

  /* Apenas valido quando queueingMode === SingleNumber*/
  get singlePhoneAreaCode(): string { return this.get('singlePhoneAreaCode') }
  set singlePhoneAreaCode(value: string) { this.set('singlePhoneAreaCode', value) }

  /* Apenas valido quando queueingMode === SingleNumber*/
  get singlePhoneNumber(): string { return this.get('singlePhoneNumber') }
  set singlePhoneNumber(value: string) { this.set('singlePhoneNumber', value) }

  /* A palavra de ação que irá aparcer no botão. Ex.: Compre*/
  get actionWord(): QueueingMode { return this.get('actionWord') }
  set actionWord(value: QueueingMode) { this.set('actionWord', value) }

  get queueingMode(): QueueingMode { return this.get('queueingMode') }
  set queueingMode(value: QueueingMode) { this.set('queueingMode', value) }

  get users(): Array<User> { return this.get('users') }
  set users(value: Array<User>) { this.set('users', value) }

  /* Apenas valido quando queueingMode === SingleNumber*/
  get lastUserCalled(): User { return this.get('lastUserCalled') }
  set lastUserCalled(value: User) { this.set('lastUserCalled', value) }

}

Parse.Object.registerSubclass('CustomerSupportButton', CustomerSupportButton);