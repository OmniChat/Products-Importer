import Parse = require("parse/node");
import { OmniChatSchema } from './Schema'
import { Retailer } from './Retailer';
import { MoipSecure } from './MoipSecure';

export class Moip extends Parse.Object {

    constructor(attributes?: any) {
        super('Moip', attributes)
    }

    get status(): OmniChatSchema.MoipStatus { return this.get('status') }
    set status(value: OmniChatSchema.MoipStatus) { this.set('status', value) }

    get installmentsWithoutInterest(): number { return this.get('installmentsWithoutInterest') }
    set installmentsWithoutInterest(value: number) { this.set('installmentsWithoutInterest', value) }

    get minimumInstallmentValue(): number { return this.get('minimumInstallmentValue') }
    set minimumInstallmentValue(value: number) { this.set('minimumInstallmentValue', value) }

    get canAcceptBoleto(): boolean { return this.get('canAcceptBoleto') }
    set canAcceptBoleto(value: boolean) { this.set('canAcceptBoleto', value) }

    get boletoMinimumOrderTotal(): number { return this.get('boletoMinimumOrderTotal') }
    set boletoMinimumOrderTotal(value: number) { this.set('boletoMinimumOrderTotal', value) }

    get boletoExpirationDays(): number { return this.get('boletoExpirationDays') }
    set boletoExpirationDays(value: number) { this.set('boletoExpirationDays', value) }

    get boletoMaxInstallments(): number { return this.get('boletoMaxInstallments') }
    set boletoMaxInstallments(value: number) { this.set('boletoMaxInstallments', value) }

    get boletoInstructions(): string { return this.get('boletoInstructions') }
    set boletoInstructions(value: string) { this.set('boletoInstructions', value) }

    get bankNumber(): number { return this.get('bankNumber') }
    set bankNumber(value: number) { this.set('bankNumber', value) }

    get accountType(): OmniChatSchema.MoipAccountType { return this.get('accountType') }
    set accountType(value: OmniChatSchema.MoipAccountType) { this.set('accountType', value) }

    get moipSecure(): MoipSecure { return this.get('moipSecure') }
    set moipSecure(value: MoipSecure) { this.set('moipSecure', value) }

    /*
    * This will make us to send all information necessary to enable Moip to perform 
    * fraud analysis. Without it all payments will go straight to the acquirer
    */
    get enableFraudControl(): boolean { return this.get('enableFraudControl') }
    set enableFraudControl(value: boolean) { this.set('enableFraudControl', value) }
}

Parse.Object.registerSubclass('Moip', Moip);