import Parse = require("parse/node");
import { OmniChatSchema } from './Schema'

export interface TradingHours {
  'monday': TradingHoursDay
  'tuesday': TradingHoursDay
  'wednesday': TradingHoursDay
  'thursday': TradingHoursDay
  'friday': TradingHoursDay
  'saturday': TradingHoursDay
  'sunday': TradingHoursDay
}

interface TradingHoursDay {
  opens: boolean
  opensAt: string
  closesAt: string
}

/**
* All possible states reflecting Whatsapp Integration
* Configuring - Getting password
* Ready - Ready to use.
* Error - Something wrong happend
*/
export enum WhatsApptatus {
  Requested = 'REQUESTED',         // Cliente requisitou integração
  SmsSent = 'SMS_SENT',            // OmniChat executou script yowsap e enviou SMS para o cliente
  SmsCodeSaved = 'SMS_CODE_SAVED', // Cliente informou o SMS. Manual OmniChat Process
  Ready = 'READY',                 // Tudo pronto
  Error = 'ERROR'                  // Algo errado ocorreu, ver propriedade errorMessage
}

export class WhatsApp extends Parse.Object {
  constructor(attributes?: any) {
    super('WhatsApp', attributes)
  }

  /** Integration status  */
  get status(): WhatsApptatus { return this.get('status') }
  set status(value: WhatsApptatus) { this.set('status', value) }

  /** SMS code sent by WhatsApp */
  get smsCode(): string { return this.get('smsCode') }
  set smsCode(value: string) { this.set('smsCode', value) }

  /** If  status === 'ERROR', it will contain more details about the error */
  get errorMessage(): string { return this.get('errorMessage') }
  set errorMessage(value: string) { this.set('errorMessage', value) }

  /** 5541991012421*/
  get retailerId(): string { return this.get('retailerId') }
  set retailerId(value: string) { this.set('retailerId', value) }

  get greetingMessageEnabled(): boolean { return this.get('greetingMessageEnabled') }
  set greetingMessageEnabled(value: boolean) { this.set('greetingMessageEnabled', value) }

  get greetingMessage(): string { return this.get('greetingMessage') }
  set greetingMessage(value: string) { this.set('greetingMessage', value) }

  get afterHoursMessageEnabled(): boolean { return this.get('afterHoursMessageEnabled') }
  set afterHoursMessageEnabled(value: boolean) { this.set('afterHoursMessageEnabled', value) }

  get tradingHours(): TradingHours { return this.get('tradingHours') }
  set tradingHours(value: TradingHours) { this.set('tradingHours', value) }

  get afterHoursMessage(): string { return this.get('afterHoursMessage') }
  set afterHoursMessage(value: string) { this.set('afterHoursMessage', value) }

  get profilePicture(): Parse.File { return this.get('profilePicture') }
  set profilePicture(value: Parse.File) { this.set('profilePicture', value) }

  // Temporário
  get whatsappWebConnector(): boolean { return this.get('whatsappWebConnector') }
  set whatsappWebConnector(value: boolean) { this.set('whatsappWebConnector', value) }

  get whatsappConnectorUrl(): string { return this.get('whatsappConnectorUrl') }
  set whatsappConnectorUrl(value: string) { this.set('whatsappConnectorUrl', value) }



}

Parse.Object.registerSubclass('WhatsApp', WhatsApp);