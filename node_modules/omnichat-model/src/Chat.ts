import Parse = require("parse/node")
import { OmniChatSchema } from './Schema'
import { Retailer } from './Retailer'
import { CustomerSupportRequest } from './CustomerSupportRequest'
import { User } from './User'
import { Customer } from './Customer';
import { Order } from './Order';
import { Message } from './Message';

export class Chat extends Parse.Object {
  constructor(attributes?: any) {
    super('Chat', attributes)
  }

  /** The omnichat customer associated to this chat */
  get customer(): Customer { return this.get('customer') }
  set customer(value: Customer) { this.set('customer', value) }

  /** Current salesperson responsible for chatting with the associated customer */
  get salesPerson(): User { return this.get('salesPerson') }
  set salesPerson(value: User) { this.set('salesPerson', value) }

  /** Current salesperson responsible for chatting with the associated customer */
  get currentOrder(): Order { return this.get('currentOrder') }
  set currentOrder(value: Order) { this.set('currentOrder', value) }

  /** The number of underead messages related tthis chat*/
  get unreadMessagesCount(): number { return this.get('unreadMessagesCount') }
  set unreadMessagesCount(value: number) { this.set('unreadMessagesCount', value) }

  /** The retailer this chat belongs to */
  get retailer(): Retailer { return this.get('retailer') }
  set retailer(value: Retailer) { this.set('retailer', value) }

  /** When the customer send the first message a support request is created before the chat gets associated to a sales person */
  get customerSupportRequest(): CustomerSupportRequest { return this.get('customerSupportRequest') }
  set customerSupportRequest(value: CustomerSupportRequest) { this.set('customerSupportRequest', value) }

  /** All previous customer support requestes that this chat recevied **/
  get previousCustomerSupportRequests(): Array<CustomerSupportRequest> { return this.get('previousCustomerSupportRequests') }
  set previousCustomerSupportRequests(value: Array<CustomerSupportRequest>) { this.set('previousCustomerSupportRequests', value) }

  /** The unique facebook id related to the facebook user that this chat is related to */
  get platform(): OmniChatSchema.ChatPlatform { return this.get('platform') }
  set platform(value: OmniChatSchema.ChatPlatform) { this.set('platform', value) }

  /** Additional Facebook information related to the facebook customer */
  get meta(): OmniChatSchema.ChatMeta { return this.get('meta') }
  set meta(value: OmniChatSchema.ChatMeta) { this.set('meta', value) }

  /** 
   * The unique facebook id related to the facebook user that this chat is related to 
   * The id is unique per facebook page, will not going to have duplications between
   * distinct retaliers

   * */
  get fbMessengerId(): string { return this.get('fbMessengerId') }
  set fbMessengerId(value: string) { this.set('fbMessengerId', value) }

  /** The whatsapp phone this chat is related to */
  get whatsAppId(): string { return this.get('whatsAppId') }
  set whatsAppId(value: string) { this.set('whatsAppId', value) }

  /** The last message associated with this chat  */
  get lastMessage(): Message { return this.get('lastMessage') }
  set lastMessage(value: Message) { this.set('lastMessage', value) }

  /** The date that the last message associated with this chat was sent  */
  get lastMessageDate(): Date { return this.get('lastMessageDate') }
  set lastMessageDate(value: Date) { this.set('lastMessageDate', value) }

  /** Attomically increment the unread message count */
  incrementUnreadMessagesCount() {
    this.increment('unreadMessagesCount')
  }
}

Parse.Object.registerSubclass('Chat', Chat)