import { OmniChatSchema } from "./Schema"

export namespace APIModel {

  export interface CretedAnswer {
    objectId: string,
    createdAt: string
  }

  export type ListAnswer = Array<any>

  export interface CountAnswer {
    count: number
  }

  export interface BaseObject {
    updatedAt?: Date
    createdAt?: Date
    objectId?: string
  }

  export interface Chat extends BaseObject {
    platform: OmniChatSchema.ChatPlatform
    platformId: string
    name: string
    user?: User
    imageUrl?: string
    customer?: Customer
  }

  export interface Message extends BaseObject {
    type: OmniChatSchema.MessageType
    status: OmniChatSchema.MessageStatus
    timestamp: number
    text: string
    system: boolean
    attachmentUrl?: string
    user?: User
    order?: Order
    variant?: Variant
    product?: Product
    error?: string
  }

  export interface Variant extends BaseObject {
    weight: number
    length: number
    height: number
    width: number
    price: number
    salePrice?: number
    quantity: number
    erpId: string
    definition1Value: string
    definition2Value: string
    imageUrl: string
    visible: boolean
    isMainVariant?: boolean
  }

  export interface Product extends BaseObject {
    name: string
    description: string
    definition1: string
    definition1Values: Array<string>
    definition2: string
    definition2Values: Array<string>
    erpId: string
    blocked: boolean
    service: boolean
    trackInventory: boolean
    sellOutOfStock: boolean
    mainVariant?: Variant
    variants: Array<Variant>
  }

  export interface Customer extends BaseObject {
    name: string
    lastName: string
    acceptsMarketing: boolean
    email: string
    taxDocumentNumber: string,
    phoneAreaCode: string
    phoneCountryCode: string
    phoneNumber: string
    birthDate: string
    businessAccount: boolean
    businessName: string
    businessTaxId: string
    address: Address
    gender: "male" | "female" | "neutral" | "other"
  }

  export interface Address {
    name: string
    addressLine1: string
    addressLine2: string
    number: string
    suburb: string
    city: string
    state: string
    country: string
    zip: string
  }

  export interface Order extends BaseObject {
    canAcceptBoleto: boolean
    boletoInstructions: OrderBoletoInstructions
    canAcceptCreditCard: boolean
    creditCardInstructions: CreditCardInstructions
    customer: Customer
    deliveryTime: string
    shippingCost: number
    discountMode: OrderDiscountMode
    discount: number
    installmentsWithoutInterest: number
    paymentInstallmentsCount: number
    items: Array<Item>
    notes: Array<Note>
    pickUpInStore: boolean
    orderId: string
    shippingAddress: Address
    shippingMethod: string
    salesPerson: User
    paymentMethod: PaymentMethod
    status: OrderStatus
    // paymentGatewayId: string
    // isInternational: boolean
  }

  export interface Item {
    quantity: number
    description: string
    price: number
    name: string
    productReference?: string
    variantObjectId?: string
    weight?: number
    length?: number
    height?: number
    width?: number

    /** 
     * Whether this item is a service. This will affect freight and checkout layout
     * This fields comes from Product.service
     * */
    service: boolean
  }

  export interface Note {
    text: number
  }

  export interface User {
    name: string
    lastName: string,
    email: string
  }

  export type OrderBoletoInstructions = {
    dueDate: string,
    installments: number // max number of installments
  }

  export type CreditCardInstructions = {
    installments: number // max number of installments
  }

  export type OrderDiscountMode = 'PERCENTAGE' | 'ABOSOLUTE'

  export type PaymentMethod = 'CREDITCARD' | 'BOLETO' | 'MULTIBOLETO'

  export type OrderStatus =
    'CREATING' |
    'CREATED' |
    'PROVISIONING' | // Payment gateway preparing the order.
    'OPEN' |
    'WAITING' |
    'PAID' |
    "PACKAGED" |
    "SHIPPED" |
    "PARTIALLY_SHIPPED" |
    "DELIVERED" |
    'NOT_PAID' |
    'PARTIAL_PAID' |
    'OVER_PAID' |
    'CANCELLED' |
    "REVERTED" |
    "ERROR"
} 