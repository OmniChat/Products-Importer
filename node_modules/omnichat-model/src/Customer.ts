import Parse = require("parse/node");
import { OmniChatSchema } from './Schema'

import { Retailer } from './Retailer';
import { Address } from './Address';
import { CreditCard } from './CreditCard';
import { User } from './User';

export class Customer extends Parse.Object {
    constructor(attributes?: any) {
        super('Customer', attributes)
    }

    get name(): string { return this.get('name') }
    set name(value: string) { this.set('name', value) }

    get lastName(): string { return this.get('lastName') }
    set lastName(value: string) { this.set('lastName', value) }

    get fullName(): string { return this.get('fullName') }
    set fullName(value: string) { this.set('fullName', value) }

    get acceptsMarketing(): boolean { return this.get('acceptsMarketing') }
    set acceptsMarketing(value: boolean) { this.set('acceptsMarketing', value) }

    get email(): string { return this.get('email') }
    set email(value: string) { this.set('email', value) }

    get phoneAreaCode(): string { return this.get('phoneAreaCode') }
    set phoneAreaCode(value: string) { this.set('phoneAreaCode', value) }

    get phoneCountryCode(): string { return this.get('phoneCountryCode') }
    set phoneCountryCode(value: string) { this.set('phoneCountryCode', value) }

    get phoneNumber(): string { return this.get('phoneNumber') }
    set phoneNumber(value: string) { this.set('phoneNumber', value) }

    get businessName(): string { return this.get('businessName') }
    set businessName(value: string) { this.set('businessName', value) }

    get birthDate(): Date { return this.get('birthDate') }
    set birthDate(value: Date) { this.set('birthDate', value) }

    get businessAccount(): boolean { return this.get('businessAccount') }
    set businessAccount(value: boolean) { this.set('businessAccount', value) }

    // IE
    get stateTaxId(): string { return this.get('stateTaxId') }
    set stateTaxId(value: string) { this.set('stateTaxId', value) }

    // CNPJ
    get businessTaxId(): string { return this.get('businessTaxId') }
    set businessTaxId(value: string) { this.set('businessTaxId', value) }

    // CPF
    get taxDocumentNumber(): string { return this.get('taxDocumentNumber') }
    set taxDocumentNumber(value: string) { this.set('taxDocumentNumber', value) }

    get retailer(): Retailer { return this.get('retailer') }
    set retailer(value: Retailer) { this.set('retailer', value) }

    get address(): Address { return this.get('address') }
    set address(value: Address) { this.set('address', value) }

    get savedCreditCard(): CreditCard { return this.get('savedCreditCard') }
    set savedCreditCard(value: CreditCard) { this.set('savedCreditCard', value) }

    /** id referente a este objeto quando integrado com um gateway externo */
    get externalId(): string { return this.get('externalId') }
    set externalId(value: string) { this.set('externalId', value) }

    /** Url for the customer picture. Example Facebook profile picture */
    get externalImageUrl(): string { return this.get('externalImageUrl') }
    set externalImageUrl(value: string) { this.set('externalImageUrl', value) }

    /** The gender of this customer */
    get gender(): OmniChatSchema.CustomerGender { return this.get('gender') }
    set gender(value: OmniChatSchema.CustomerGender) { this.set('gender', value) }

    /** If the account.customerBaseSegmentation is true then this  */
    get salesPerson(): User { return this.get('salesPerson') }
    set salesPerson(value: User) { this.set('salesPerson', value) }

}

Parse.Object.registerSubclass('Customer', Customer);