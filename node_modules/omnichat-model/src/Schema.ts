import Parse = require("parse/node");
import { SignUp } from "./SignUp";

export namespace OmniChatSchema {

  // all optionals as only saved objects have them
  export interface ParseObject {
    updatedAt?: Date
    createdAt?: Date
    objectId?: string
    __type?: string
    className?: string
  }

  export interface ParseDate {
    __type: "Date"
    iso: string
  }

  export interface ParseFile {
    __type: "File"
    name: string //"6f7b48fa986d634f4c15f4582ffb9351_call_center_agent_2.jpg"
    url: string // "https://omni.chat/file/example.com"
  }

  export interface ParsePointer {
    __type: "Pointer"
    className: string
    objectId: string
  }

  export interface GoogleXml extends ParseObject {
    url: string
    retailer: Retailer
  }

  export enum MessageType {
    Image = "IMAGE",              // Image message
    Text = "TEXT",              // Text message
    Audio = "AUDIO",           // Audio message
    File = "FILE",               // File message
    Video = "VIDEO",            // Video message
    Location = "LOCATION",        // Product message
    Product = "PRODUCT",           // Showing a product to the customer
    Variant = "VARIANT",         // Showing a product to the customer
    PaymentRequest = "PAYMENT_REQUEST",    // Request payment to the customer
    OrderConfirmation = "ORDER_CONFIRMATION",  // Showing order confirmation to the customer
    OrderStatus = "ORDER_STATUS",      // Order tracking
    Collection = "COLLECTION", // Showing a Model.Collection to the customer
  }

  export enum MessageStatus {
    OutgoingCreated = "OUTGOING_CREATED",   // Saved at Parse
    OutgoingSent = "OUTGOING_SENT",      // Sent by the adapter
    OUTGOING_DELIVERED = "OUTGOING_DELIVERED",// Confirmed delivered to the customer
    OutgoingRead = "OUTGOING_READ",     // Read by the customer
    OutgoingError = "OUTGOING_ERROR",    // Message with error. See error
    OutgoingSilent = "OUTGOING_SILENT",   // Message that will be presented only to the retailer users
    IncomingRecevied = "INCOMING_RECEIVED",  // Saved at Parse
    IncomingRead = "INCOMING_READ"        // Read by the salesPerson
  }

  export interface Retailer extends ParseObject {
    name: string
    canonicalName: string
    moip?: Moip
    website?: string
    paymentGateway?: string
    orderGateway?: string
    productsGateway?: string
    customerGateway?: string
    boletoGateway?: string
    enablePricingTables?: boolean
    ciashop?: Ciashop
    fiscalAddress: Branch
    productTerms?: ParseFile
    phoneCountry: number
    phoneAreaCode: number
    phoneNumber: number
    account: Account
    logo?: ParseFile
    icon?: ParseFile
    mainActivity?: string
    tradingHours?: string
    taxDocumentNumber?: string
    lastUniqueOrderId: number
    freightCalculation?: FreightCalculation
    signup?: ParsePointer | SignUp
  }

  export enum ChatPlatform {
    Whatsapp = 'WHATSAPP',
    FBMessenger = 'FBMESSENGER',
    Skype = 'SKYPE',
    Email = 'EMAIL',
    Sms = 'SMS',
    Chatclub = 'CHATCLUB'
  }

  export enum CustomerSupportRequestType {
    Button = 'BUTTON',
    Collection = 'COLLECTION',
    Chat = "CHAT"
  }

  export enum CustomerSupportRequestStatus {
    Waiting = 'WAITING',
    Contacted = 'CONTACTED',
    Finished = 'FINISHED'
  }

  export type ChatMeta = {
    name: string,
    gender?: string,
    imageUrl?: string,
    timezone?: number
  }

  export interface Chat extends ParseObject {
    customer: Customer,
    salesPerson: User,
    currentOrder: Order,
    unreadMessagesCount: number,
    retailer: Retailer,
    customerSupportRequest: CustomerSupportRequest,
    previousCustomerSupportRequests: Array<CustomerSupportRequest>,
    platform: ChatPlatform,
    meta: ChatMeta,
    fbMessengerId: string,
    whatsAppId: string,
    lastMessage: Message,
    lastMessageDate: Date
  }

  export interface Message extends ParseObject {
    type: MessageType,
    timestamp: number,
    externalId: string,
    text: string,
    status: MessageStatus,
    system: boolean,
    chat: Chat,
    attachment: ParseFile,
    attachmentUrl: string,
    location: Parse.GeoPoint,
    salesPerson: User,
    order?: Order,
    product?: Product,
    variant?: Variant,
    error?: string
  }


  export interface CustomerSupportRequest extends ParseObject {
    type: CustomerSupportRequestType
    status: CustomerSupportRequestStatus
    notes: string
    name: string
    source: string
    sourceDetail: string
    sourceId: string
    closingReason: string
    contactedAt: string
    finishedAt: string
    user?: ParsePointer
    retailer?: ParsePointer
    retailerId: string
    semaphore: number
  }

  export interface SocialAppsUsage {
    whatsapp: boolean
    facebook: boolean
    instagram: boolean
  }

  export interface SignUp extends ParseObject {
    street: string
    suburb: string
    complement: string
    phoneCountry: string
    phoneAreaCode: string
    phoneNumber: string
    city: string,
    state: string
    name: string
    lastName: string
    streetNumber: string
    zipCode: string
    country: string
    retailerName: string
    email: string
    ecommerceSite: string
    ecommercePlatform: string
    ecommercePlatformOther: string
    apps: SocialAppsUsage
    businessSegment: string
    businessSegmentOther: string
    companySize: string
  }

  export interface Account extends ParseObject {
    memberSince: ParseDate

    /** A name that identifies the place. i.e.: Casa, Sede */
    plan: string
    inactive: boolean
    inactiveReason: string
    inactiveSince?: ParseDate

    /** Feature: Wheather this store has the Facebook Messenger available */
    fbMessenger: boolean

    /** Feature: Wheather this store has the Collection available */
    collections: boolean

    /** 
     * Maximum number of users that this store can have configured 
     * Unlimited: use -1
     * */
    maxUsers: number
  }

  export interface CiashopSecure extends ParseObject {
    accessToken: string
  }

  export interface Ciashop {
    webhookIds: Array<string>
    variantPlaceHolderId: string
    defaultDepartmentId: string
    status: CiashopStatus
    importationStatus: CiashopImportationStatus
    customersLastUpdatedAt: ParseDate
    productsLastUpdatedAt: ParseDate

    /** Features that are not enable by default */
    additionalFeatures: Array<CiashopAdditionalFeatures>

    /** Most recent updatedAt property received from the synced PricingTable objects */
    pricingTablesLastUpdatedAt: ParseDate
    retailerURL: string
    errorDescription: string

    /**
     * Ciashop product has three prices: price, salePrice and promotionPrice.
     * The promotion price is a result of a external promotion rule which OmniChat
     * does not have access to. Therefor is up to the store to enable it or not.
     * The default value is false
     */
    usePromotionPrice: boolean
    ciashopSecure: CiashopSecure
  }

  export interface Branch extends ParseObject {
    name: string
    addressLine1: string
    addressLine2: string
    number: string
    suburb: string
    city: string
    addressState: string
    country: string
    zip: string
    retailer: Retailer
  }

  export interface Moip extends ParseObject {
    status: MoipStatus
    installmentsWithoutInterest: number
    minimumInstallmentValue: number
    canAcceptBoleto: boolean
    boletoMinimumOrderTotal: number
    boletoExpirationDays: number
    boletoMaxInstallments: number
    boletoInstructions: string
    bankNumber: number
    accountType: MoipAccountType
    moipSecure: MoipSecure
  }

  export interface MoipSecure extends ParseObject {
    accessToken: string
    percentageFee: number
    fixedFee: number
  }

  export interface Order extends ParseObject {
    canAcceptBoleto: boolean

    /** How the boleto will be created for this order */
    boletoInstructions: OrderBoletoInstructions

    canAcceptCreditCard: boolean

    /** How the credit card payment will be created for this order */
    creditCardInstructions: CreditCardInstructions

    customer: Customer

    deliveryTime: string

    freightCost: number

    /** 
     * When the retailer.freightCalculation.mode is to Automatic then the
     * salesperson may choose to adjust the shipping cost on his own
     */
    freightCostAdjusted: number

    /**  How the discount has been applied.*/
    discountMode: OrderDiscountMode

    /**  The discount, regardless the discountMode it is always abosolute.*/
    discount: number

    installmentsWithoutInterest: number

    /** Installments that the customer have chosen to pay for this order */
    paymentInstallmentsCount: number

    items: Array<Item>

    notes: Array<Note>

    pickUpInStore: boolean

    retailer: Retailer

    retailerOrderId: string

    user: User

    shippingAddress: Address

    shippingMethod: string

    salesPerson: User

    paymentMethod: PaymentMethod

    status: OrderStatus

    statusTracking: OrderStatusTracking

    orderGwId: string

    /** id referente a este objeto quando integrado com um gateway externo */
    externalId: string

    /** id referente a este objeto quando integrado com um gateway externo */
    parentOrder: Order

    isInternational: boolean
  }

  export interface Customer extends ParseObject {
    lastName?: string
    fullName?: string
    acceptsMarketing?: boolean
    email?: string
    phoneAreaCode?: string
    phoneCountryCode?: string
    phoneNumber?: string
    businessName?: string
    name?: string
    birthDate?: ParseDate
    businessAccount?: boolean
    stateTaxId?: string
    businessTaxId?: string
    taxDocumentNumber?: string
    retailer?: Retailer
    address?: Address
    savedCreditCard?: CreditCard

    /** id referente a este objeto quando integrado com um gateway externo */
    externalId?: string

    /** Url for the customer picture. Example Facebook profile picture */
    externalImageUrl?: string

    /** The gender of this customer */
    gender?: CustomerGender
  }

  export interface Address extends ParseObject {
    /** A name that identifies the place. i.e.: Casa, Sede */
    name?: string
    addressLine1?: string
    addressLine2?: string
    number?: string
    suburb?: string
    city?: string
    addressState?: string
    country?: string
    zip?: string
    recipient?: string
  }

  export interface User extends ParseObject {
    retailer: Retailer
    name: string
    lastName: string
    email: string
  }

  export interface Note extends ParseObject {
    private: boolean
    text: number
    salesPerson: User
  }

  export interface Item extends ParseObject {
    quantity: number
    detail: string
    price: number
    product: string
    productReference?: string
    variant?: Variant
    weight?: number
    length?: number
    height?: number
    width?: number

    /** 
     * Whether this item is a service. This will affect freight and checkout layout
     * This fields comes from Product.service
     * */
    service: boolean
  }

  export interface Product extends ParseObject {
    name?: string
    productDescription?: string
    definition1?: string
    definition1Values?: Array<string>
    definition2?: string
    definition2Values?: Array<string>
    erpId?: string
    blocked?: boolean
    service?: boolean
    trackInventory?: boolean
    sellOutOfStock?: boolean
    mainVariant?: Variant
    variants?: Array<Variant>
  }

  export interface Variant extends ParseObject {
    weight?: number
    length?: number
    height?: number
    width?: number
    price?: number
    salePrice?: number
    saleStartDate?: ParseDate
    saleEndDate?: ParseDate
    quantity?: number
    erpId?: string
    definition1Value?: string
    definition2Value?: string
    thumbnail?: ParseFile
    image?: ParseFile
    externalImageURL?: string

    /** id referente a este objeto quando integrado com um gateway externo */
    externalId?: string

    /** 
     * This variant will not be presented when showing available product variants
     * When undefined the variant is considered visible.
     * */
    visible?: boolean
  }

  export interface CreditCard extends ParseObject {
    fullName: string
    birthDate: ParseDate
    phoneNumber: string
    taxId: string
    taxDocumentType: TaxDocumentType
    brand: string
    last4: string
    hash: string
    billingAddress: Address
  }

  /*
   * Custom Types
   */

  export type MoipAccountType = '2D' | '30D' | 'FLUXO'
  export type MoipStatus = 'CREATING' | 'PASSWORD' | 'AUTHORIZE' | 'READY' | "ERROR"

  export type TaxDocumentType = 'CPF' | 'CNPJ'
  export type CreditCardBrand = 'mastercard' | 'visa' | 'elo' | 'diners' | 'hipercard' | 'amex'

  // export type CustomerGender = "male" | "female" | "neutral" | "other"

  export enum CustomerGender {
    Male = 'male',
    Female = 'female'
  }


  export interface FreightCalculation {
    /* 
     * MANUAL: The salesperson will manually calculate and input the shipping costs
     * AUTOMATIC: The salesperson may request the gateway to calculate it, but he or her may change it
     * BACKEND: The shipping cost will be calculated by the backend after the order is saved
     */
    mode: 'MANUAL' | 'AUTOMATIC' | 'BACKEND'

    /* 
    * CORREIOS: The freight will be calculated using the correios adapter
    * ORDER_GATEWAY: The freight calculation will be performed by configured order gateway adapter
    */
    adapter: 'CORREIOS' | 'CIASHOP'

    /*
     * Wheather the salesPerson can change the freight value on his own 
     */
    adjustedCost: boolean

    /*
     * set to true if the adapter can handle items that are created only for the order
     * (line item)
     */
    canCalculateLineItems: boolean

    /*
     * Only apply when canCalculateLineItems is set to true
     * If set to true it will allow the adapter to calculate line item without dimensions
     * (line item)
     */
    canCalculateLineItemsWithoutDimensions: boolean

    /**
     * 
     * Correios specific config
     * 
     */
    correios?: {
      login?: string,
      password?: string,
      declaredValue: boolean,
      identifiedRecipient: boolean,
      deliveryNotification: boolean,
      additionalServices: Array<string>,
    }
  }

  /**
  * All possible states reflecting GoogleXML Integration
  * - IMPORTING: Importing Products and Variants
  * - READY: All imports are finished and ready for usage
  * - ERROR: Something wen wrong, see property errorDescription for more details
  */
  export type GoogleXmlStatus = 'IMPORTING' | 'READY' | 'ERROR'

  /**
  * All possible states reflecting Ciashop Integration
  * - REQUESTED: Client saved a new Ciashop object and the backend is waiting for the oAuth request
  * - CONFIGURED: Oauth token recevied and webhooks are set
  * - QUEUED: The user requested the importation
  * - IMPORTING: Importing Ciashop Products, Variants and customers
  * - READY: All imports are finished and ready for usage
  * - SYNCRONIZING: Sync process is executing
  * - ERROR: Something wen wrong, see property errorDescription for more details
  */
  export type CiashopStatus = 'REQUESTED' | 'CONFIGURED' | 'QUEUED' | 'IMPORTING' | 'READY' | 'SYNCHRONIZING' | 'ERROR' | 'SYNC_ERROR'

  export type CiashopImportationStatus = {
    status?: 'REMOVING_OLD_CUSTOMERS' | 'REMOVING_OLD_PRODUCTS' | 'IMPORTING_PRODUCTS' | 'IMPORTING_CUSTOMERS'
    customersTotal: number
    customersImported: number
    productsTotal: number
    productsImported: number
  }

  /** Features that are not enable by default 
   * - PRICING_TABLES: Works alongside the module MutiPrice from Ciashop. 
   *   At OmniChat we import TablePrice and Price, we also retailer.enablePricingTables to true
  */
  export type CiashopAdditionalFeatures = 'PRICING_TABLES'


  export type PaymentMethod = 'CREDITCARD' | 'BOLETO' | 'MULTIBOLETO';
  export type OrderStatus =
    'CREATING' |
    'CREATED' |
    'PROVISIONING' | // Payment gateway preparing the order.
    'OPEN' |
    'WAITING' |
    'PAID' |
    "PACKAGED" |
    "SHIPPED" |
    "PARTIALLY_SHIPPED" |
    "DELIVERED" |
    'NOT_PAID' |
    'PARTIAL_PAID' |
    'OVER_PAID' |
    'CANCELLED' |
    "REVERTED" |
    "ERROR"

  export type OrderStatusTracking = "FBMESSENGER"

  export type OrderDiscountMode = 'PERCENTAGE' | 'ABOSOLUTE'

  export type OrderBoletoInstructions = {
    dueDate: ParseDate,
    installments: number // max number of installments
  }

  export type CreditCardInstructions = {
    installments: number // max number of installments
  }

  /**
 * All possible states reflecting Ciashop Integration
 * WAITING_TOKEN - The user has sumbimted the user access token, the backend is processing the request.
 * READY - All good.
 * ERROR - Error requesting the page access token
 */
  export type ChatClubStatus = 'WAITING_TOKEN' | 'READY' | 'ERROR'

  /**
 * All possible states reflecting Facebook Integration
 * WAITING_TOKEN - The user has sumbimted the user access token, the backend is processing the request.
 * READY - All good.
 * ERROR - Error requesting the page access token
 */
  export type FBMessengerStatus = 'WAITING_TOKEN' | 'READY' | 'ERROR'

}