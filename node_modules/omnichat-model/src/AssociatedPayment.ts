import Parse = require("parse/node");
import { OmniChatSchema } from './Schema'
import { Associated } from './Associated';

interface AssociatedPaymentCommision {
    retailerName: string
    omnichatRevenue: number
    associatedCommisionPercentage: number
    associatedCommisionTotal: number
}

type AssociatedPaymentStatus =
    'WAITING_INVOICE' | // Wating omnichat associated invoice
    'PAID' | // associated has been paid
    'EXPIRED' // associated has not sent the invoice in a time manner

export class AssociatedPayment extends Parse.Object {
    constructor(attributes?: any) {
        super('AssociatedPayment', attributes)
    }

    /** the status of this payment*/
    get status(): AssociatedPaymentStatus { return this.get('status') }
    set status(value: AssociatedPaymentStatus) { this.set('status', value) }

    /** the code to be used when the retailer is being created*/
    get start(): Date { return this.get('start') }
    set start(value: Date) { this.set('start', value) }

    /** the code to be used when the retailer is being created*/
    get end(): Date { return this.get('end') }
    set end(value: Date) { this.set('end', value) }

    /** the user that owns this association*/
    get commissionsDetails(): Array<AssociatedPaymentCommision> { return this.get('commissionsDetails') }
    set commissionsDetails(value: Array<AssociatedPaymentCommision>) { this.set('commissionsDetails', value) }

    /** the associated that owns this association*/
    get associated(): Associated { return this.get('associated') }
    set associated(value: Associated) { this.set('associated', value) }

    /** the percentage of the omnichat fee that will be paid to the associated*/
    get totalCommissionsEarned(): number { return this.get('totalCommissionsEarned') }
    set totalCommissionsEarned(value: number) { this.set('totalCommissionsEarned', value) }
}

Parse.Object.registerSubclass('AssociatedPayment', AssociatedPayment);