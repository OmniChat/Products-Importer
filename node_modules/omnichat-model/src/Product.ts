import Parse = require("parse/node");
import { OmniChatSchema } from './Schema'
import { Variant } from './Variant';
import { Retailer } from './Retailer';

export type DefinitionValue = {
  value: string//"16GB"
  image?: string //image path
}

export class Product extends Parse.Object {
  constructor(attributes?: any) {
    super('Product', attributes)
  }

  get mainVariant(): Variant { return this.get('mainVariant') }
  set mainVariant(value: Variant) { this.set('mainVariant', value) }

  get variants(): Array<Variant> { return this.get('variants') }
  set variants(value: Array<Variant>) { this.set('variants', value) }

  get productDescription(): string { return this.get('productDescription') }
  set productDescription(value: string) { this.set('productDescription', value) }

  get name(): string { return this.get('name') }
  set name(value: string) { this.set('name', value) }

  /** The name of the the definition 1. Ex: Memory size */
  get definition1(): string { return this.get('definition1') }
  set definition1(value: string) { this.set('definition1', value) }

  /** The possible values for the definition 1. Ex: 16Gb, 32GB */
  get definition1Values(): Array<DefinitionValue> { return this.get('definition1Values') }
  set definition1Values(value: Array<DefinitionValue>) { this.set('definition1Values', value) }

  /** The name of the the definition 2. Ex: Color */
  get definition2(): string { return this.get('definition2') }
  set definition2(value: string) { this.set('definition2', value) }

  /** The possible values for the definition 2. Ex: Black, Silver */
  get definition2Values(): Array<DefinitionValue> { return this.get('definition2Values') }
  set definition2Values(value: Array<DefinitionValue>) { this.set('definition2Values', value) }

  get erpId(): string { return this.get('erpId') }
  set erpId(value: string) { this.set('erpId', value) }

  get retailer(): Retailer { return this.get('retailer') }
  set retailer(value: Retailer) { this.set('retailer', value) }

  /** id referente a este objeto quando integrado com um gateway externo */
  get externalId(): string { return this.get('externalId') }
  set externalId(value: string) { this.set('externalId', value) }

  /** 
   * Indicates that this product is blocked for sale.
   * Cannot be added to a order and will not be presented in any user search
   * When undefined the product is not considered blocked.
   * default is false
   * */
  get blocked(): boolean { return this.get('blocked') }
  set blocked(value: boolean) { this.set('blocked', value) }

  /** 
   * Whether this product is a service. 
   * This will affect freight and checkout layout
   * default is false
   * */
  get service(): boolean { return this.get('service') }
  set service(value: boolean) { this.set('service', value) }


  /** 
   * OmniChat will control de inventory.
   * Applies when Retailer.ProductGateway is set to OMNICHAT
   * Saved order will decrease variant.quanitty and
   * Cancelled or Not_Paid order will return the stock to variant.quantity
   * default is false
   * */
  get trackInventory(): boolean { return this.get('trackInventory') }
  set trackInventory(value: boolean) { this.set('trackInventory', value) }

  /** 
   * Set to yes to allow this product to be sold without variant.quantity
   * Only applies when trackInventory is set to true.
   * default is false
   * */
  get sellOutOfStock(): boolean { return this.get('sellOutOfStock') }
  set sellOutOfStock(value: boolean) { this.set('sellOutOfStock', value) }

  /**
   * The date that this probduct was imported via Google Shopping XML
   */
  get googleXMLImportingDate(): Date { return this.get('googleXMLImportingDate') }
  set googleXMLImportingDate(value: Date) { this.set('googleXMLImportingDate', value) }
}

Parse.Object.registerSubclass('Product', Product);