import Parse = require("parse/node");
import { OmniChatSchema } from './Schema'
import { Variant } from './Variant';

export class Item extends Parse.Object {
    constructor(attributes?: any) {
        super('Item', attributes)
    }

    get quantity(): number { return this.get('quantity') }
    set quantity(value: number) { this.set('quantity', value) }

    get detail(): string { return this.get('detail') }
    set detail(value: string) { this.set('detail', value) }

    get price(): number { return this.get('price') }
    set price(value: number) { this.set('price', value) }

    get product(): string { return this.get('product') }
    set product(value: string) { this.set('product', value) }

    get productReference(): string { return this.get('productReference') }
    set productReference(value: string) { this.set('productReference', value) }

    get variant(): Variant { return this.get('variant') }
    set variant(value: Variant) { this.set('variant', value) }

    get weight(): number { return this.get('weight') }
    set weight(value: number) { this.set('weight', value) }

    get length(): number { return this.get('length') }
    set length(value: number) { this.set('length', value) }

    get height(): number { return this.get('height') }
    set height(value: number) { this.set('height', value) }

    get width(): number { return this.get('width') }
    set width(value: number) { this.set('width', value) }

    /** 
     * Whether this item is a service. This will affect freight and checkout layout
     * This fields comes from Product.service
     * */
    get service(): boolean { return this.get('service') }
    set service(value: boolean) { this.set('service', value) }

    imageUrl(): string {
        let image;
        if (this.variant) {
            if (this.variant.externalImageURL) {
                image = this.variant.externalImageURL;
            } else if (this.variant.image) {
                image = this.variant.image.url()
            }
        }
        return image
    }

    thumbnailUrl(): string {
        let image;
        if (this.variant) {
            if (this.variant.externalImageURL) {
                image = this.variant.externalImageURL;
            } else if (this.variant.thumbnail) {
                image = this.variant.thumbnail.url()
            }
        }
        return image
    }
}

Parse.Object.registerSubclass('Item', Item);
