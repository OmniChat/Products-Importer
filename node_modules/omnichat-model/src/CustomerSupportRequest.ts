import Parse = require("parse/node");
import { OmniChatSchema } from './Schema'

import { Retailer } from './Retailer';
import { User } from './User';


export class CustomerSupportRequest extends Parse.Object {
    constructor(attributes?: any) {
        super('CustomerSupportRequest', attributes)
    }

    /** The type of this support request*/
    get type(): OmniChatSchema.CustomerSupportRequestType { return this.get('type') }
    set type(value: OmniChatSchema.CustomerSupportRequestType) { this.set('type', value) }

    /** As the salesperson gives customer support the status of this request changes */
    get status(): OmniChatSchema.CustomerSupportRequestStatus { return this.get('status') }
    set status(value: OmniChatSchema.CustomerSupportRequestStatus) { this.set('status', value) }

    /** Additional notes about this request */
    get notes(): string { return this.get('notes') }
    set notes(value: string) { this.set('notes', value) }

    /** The name of the person requesting support */
    get name(): string { return this.get('name') }
    set name(value: string) { this.set('name', value) }

    /** Where the person requesting support came from. Ex: WHATSAPP  */
    get source(): OmniChatSchema.ChatPlatform { return this.get('source') }
    set source(value: OmniChatSchema.ChatPlatform) { this.set('source', value) }

    /** 
     * More details about the request. 
     * Ex: 
     *   - the url that the user was when he or she requested support or 
     *   - the name of the collection selected.
     *   - the text of the message (Chat)
     * */
    get sourceDetail(): string { return this.get('sourceDetail') }
    set sourceDetail(value: string) { this.set('sourceDetail', value) }

    /** The customer identification related to the source. Ex: 41991012421 */
    get sourceId(): string { return this.get('sourceId') }
    set sourceId(value: string) { this.set('sourceId', value) }

    /** What happend with this request*/
    get closingReason(): string { return this.get('closingReason') }
    set closingReason(value: string) { this.set('closingReason', value) }

    /** when the salesperson pickedup this request*/
    get contactedAt(): Date { return this.get('contactedAt') }
    set contactedAt(value: Date) { this.set('contactedAt', value) }

    /** The user that picked this request*/
    get contactedBy(): Parse.User { return this.get('contactedBy') }
    set contactedBy(value: Parse.User) { this.set('contactedBy', value) }

    /** when the salesperson finished this request*/
    get finishedAt(): Date { return this.get('finishedAt') }
    set finishedAt(value: Date) { this.set('finishedAt', value) }

    /** The user that finished this request*/
    get finishedBy(): Parse.User { return this.get('finishedBy') }
    set finishedBy(value: Parse.User) { this.set('finishedBy', value) }

    /** The salesperson that is currently responsible for this request*/
    get user(): Parse.User { return this.get('user') }
    set user(value: Parse.User) { this.set('user', value) }

    /** All The salesperson got involed with this request*/
    get participatingUsers(): Array<Parse.User> { return this.get('participatingUsers') }
    set participatingUsers(value: Array<Parse.User>) { this.set('participatingUsers', value) }

    /** The retailer that owns this request*/
    get retailer(): Retailer { return this.get('retailer') }
    set retailer(value: Retailer) { this.set('retailer', value) }

    /** 
    * Used to control that only a single user get the requests.
    * only the backend uses it. Don't change its value
    */
    get semaphore(): number { return this.get('semaphore') }
    set semaphore(value: number) { this.set('semaphore', value) }

    get retailerCreated(): boolean { return this.get('retailerCreated') }
    set retailerCreated(value: boolean) { this.set('retailerCreated', value) }

}

Parse.Object.registerSubclass('CustomerSupportRequest', CustomerSupportRequest);