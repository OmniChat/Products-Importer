import Parse = require("parse/node");

export interface PlanChange {
  from: string
  to: string
  requestedBy: string //username
  date: Date
  billingPeriod: AccountBillingPeriod
}

export interface AdditionalUsersChange {
  from: number
  to: number
  date: Date
  requestedBy: string //username
}

export enum AccountPlans {
  Trial = 'TRIAL',
  Classic = 'CLASSIC',
  Professional = 'PROFESSIONAL',
  Enterprise = 'ENTERPRISE'
}

export enum AccountBillingPeriod {
  Month = 'MONTH',
  Year = 'YEAR',
}

export enum PaymentMethod {
  Boleto = 'Boleto',
  CreditCard = 'CreditCard',
}

export interface AccountFeature {
  available: boolean,
  enabled?: boolean
}

export enum PricingTableMode {
  Customer = 'CUSTOMER',
  SalesPerson = 'SALESPERSON',
  Order = 'ORDER',
}

export enum InactiveReason {
  Payment = 'PAYMENT', //Missing payment
}

export interface AccountPricingTableFeature extends AccountFeature {
  mode: PricingTableMode,
}

export enum FieldConfig {
  disabled = "DISABLED",
  available = 'AVAILABLE',
  required = "REQUIRED"
}

export interface CustomerFields {
  gender?: FieldConfig
  email?: FieldConfig
}

export class Account extends Parse.Object {
  constructor(attributes?: any) {
    super('Account', Account)
  }

  get memberSince(): Date { return this.get('memberSince') }
  set memberSince(value: Date) { this.set('memberSince', value) }

  /** The name of the current retailer plan */
  get plan(): AccountPlans { return this.get('plan') }
  set plan(value: AccountPlans) { this.set('plan', value) }

  /** The name of the current retailer plan */
  get paymentMethod(): PaymentMethod { return this.get('paymentMethod') }
  set paymentMethod(value: PaymentMethod) { this.set('paymentMethod', value) }

  /** The name of the current retailer plan */
  get billingPeriod(): AccountBillingPeriod { return this.get('billingPeriod') }
  set billingPeriod(value: AccountBillingPeriod) { this.set('billingPeriod', value) }

  get billingDay(): number { return this.get('billingDay') }
  set billingDay(value: number) { this.set('billingDay', value) }

  /** logs all plan changes requested by the retailer */
  get planChanges(): Array<PlanChange> { return this.get('planChanges') }
  set planChanges(value: Array<PlanChange>) { this.set('planChanges', value) }

  /** how many days this retailer have left on trial */
  get trialRemainingDays(): number { return this.get('trialRemainingDays') }
  set trialRemainingDays(value: number) { this.set('trialRemainingDays', value) }

  get inactive(): boolean { return this.get('inactive') }
  set inactive(value: boolean) { this.set('inactive', value) }

  get inactiveReason(): InactiveReason { return this.get('inactiveReason') }
  set inactiveReason(value: InactiveReason) { this.set('inactiveReason', value) }

  get inactiveSince(): Date { return this.get('inactiveSince') }
  set inactiveSince(value: Date) { this.set('inactiveSince', value) }

  /** Feature: Wheather this store has the Collection available */
  get collections(): boolean { return this.get('collections') }
  set collections(value: boolean) { this.set('collections', value) }

  /** Feature: Wheather this store can sell outside brazil available */
  get internationalSale(): boolean { return this.get('internationalSale') }
  set internationalSale(value: boolean) { this.set('internationalSale', value) }

  /** Feature: Wheather this store can be use API */
  get api(): boolean { return this.get('api') }
  set api(value: boolean) { this.set('api', value) }

  /** 
   * number of users that this retailer have configured based on the contracted plan
   * */
  get planUsers(): number { return this.get('planUsers') }
  set planUsers(value: number) { this.set('planUsers', value) }

  /** 
   * number of users that this store have requested
   * */
  get additionalUsers(): number { return this.get('additionalUsers') }
  set additionalUsers(value: number) { this.set('additionalUsers', value) }

  get additionalUsersCost(): number { return this.get('additionalUsersCost') }
  set additionalUsersCost(value: number) { this.set('additionalUsersCost', value) }

  get unlimitedUsers(): boolean { return this.get('unlimitedUsers') }
  set unlimitedUsers(value: boolean) { this.set('unlimitedUsers', value) }

  /** logs all additionalUsers changes requested by the retailer */
  get additionalUsersChanges(): Array<AdditionalUsersChange> { return this.get('additionalUsersChanges') }
  set additionalUsersChanges(value: Array<AdditionalUsersChange>) { this.set('additionalUsersChanges', value) }

  /** Customer segmentation per salesPerson is available*/
  get customerBaseSegmentation(): AccountFeature { return this.get('customerBaseSegmentation') }
  set customerBaseSegmentation(value: AccountFeature) { this.set('customerBaseSegmentation', value) }

  /** Retailer has chat feature*/
  get chat(): boolean { return this.get('whatsapp') }
  set chat(value: boolean) { this.set('whatsapp', value) }

  /** Customer segmentation per salesPerson is available*/
  get whatsapp(): AccountFeature { return this.get('whatsapp') }
  set whatsapp(value: AccountFeature) { this.set('whatsapp', value) }

  /** Feature: Wheather this store has the Facebook Messenger available */
  get fbMessenger(): boolean { return this.get('fbMessenger') }
  set fbMessenger(value: boolean) { this.set('fbMessenger', value) }

  /** 
 * Enables pricing tables for this retailer. See PricingTable class 
 * */
  get pricingTables(): AccountPricingTableFeature { return this.get('pricingTables') }
  set pricingTables(value: AccountPricingTableFeature) { this.set('pricingTables', value) }

  /** 
  * Enables pricing tables for this retailer. See PricingTable class 
  * */
  get orderLineItem(): boolean { return this.get('orderLineItem') }
  set orderLineItem(value: boolean) { this.set('orderLineItem', value) }

  /** 
  * Enables pricing tables for this retailer. See PricingTable class 
  * */
  get orderDiscount(): boolean { return this.get('orderDiscount') }
  set orderDiscount(value: boolean) { this.set('orderDiscount', value) }


  /** 
  * Customer fields - defines which fields will be presented and 
  * whether they are mandatory or not.
  * */
  get customerFields(): CustomerFields { return this.get('customerFields') }
  set customerFields(value: CustomerFields) { this.set('customerFields', value) }

}

Parse.Object.registerSubclass('Account', Account);