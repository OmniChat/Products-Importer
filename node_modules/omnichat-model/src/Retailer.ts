import Parse = require("parse/node");
import { OmniChatSchema } from './Schema'

import { Branch } from './Branch';
import { Moip } from './Moip';
import { Ciashop } from './Ciashop';
import { Account } from './Account';
import { WhatsApp } from './WhatsApp';
import { SignUp } from './SignUp';

export enum ProductsGateway {
    OmniChat = 'OMNICHAT',
    Ciashop = 'CIASHOP',
    GoogleXML = 'GoogleXML'
}


export class Retailer extends Parse.Object {
    constructor(attributes?: any) {
        super('Retailer', attributes)
    }

    get name(): string { return this.get('name') }
    set name(value: string) { this.set('name', value) }

    get canonicalName(): string { return this.get('canonicalName') }
    set canonicalName(value: string) { this.set('canonicalName', value) }

    get moip(): Moip { return this.get('moip') }
    set moip(value: Moip) { this.set('moip', value) }

    get website(): string { return this.get('website') }
    set website(value: string) { this.set('website', value) }

    get paymentGateway(): string { return this.get('paymentGateway') }
    set paymentGateway(value: string) { this.set('paymentGateway', value) }

    get orderGateway(): string { return this.get('orderGateway') }
    set orderGateway(value: string) { this.set('orderGateway', value) }

    get productsGateway(): ProductsGateway { return this.get('productsGateway') }
    set productsGateway(value: ProductsGateway) { this.set('productsGateway', value) }

    get customerGateway(): string { return this.get('customerGateway') }
    set customerGateway(value: string) { this.set('customerGateway', value) }

    get boletoGateway(): string { return this.get('boletoGateway') }
    set boletoGateway(value: string) { this.set('boletoGateway', value) }

    get ciashop(): Ciashop { return this.get('ciashop') }
    set ciashop(value: Ciashop) { this.set('ciashop', value) }

    get fiscalAddress(): Branch { return this.get('fiscalAddress') }
    set fiscalAddress(value: Branch) { this.set('fiscalAddress', value) }

    // Termos que cliente deve aceitar na compra dos produtos ou servi√ßos
    get productTerms(): Parse.File { return this.get('productTerms') }
    set productTerms(value: Parse.File) { this.set('productTerms', value) }

    get phoneCountry(): number { return this.get('phoneCountry') }
    set phoneCountry(value: number) { this.set('phoneCountry', value) }

    get phoneAreaCode(): number { return this.get('phoneAreaCode') }
    set phoneAreaCode(value: number) { this.set('phoneAreaCode', value) }

    get phoneNumber(): number { return this.get('phoneNumber') }
    set phoneNumber(value: number) { this.set('phoneNumber', value) }

    get account(): Account { return this.get('account') }
    set account(value: Account) { this.set('account', value) }

    get signup(): SignUp { return this.get('signup') }
    set signup(value: SignUp) { this.set('signup', value) }

    get logo(): Parse.File { return this.get('logo') }
    set logo(value: Parse.File) { this.set('logo', value) }

    get icon(): Parse.File { return this.get('icon') }
    set icon(value: Parse.File) { this.set('icon', value) }

    get mainActivity(): string { return this.get('mainActivity') }
    set mainActivity(value: string) { this.set('mainActivity', value) }

    get tradingHours(): string { return this.get('tradingHours') }
    set tradingHours(value: string) { this.set('tradingHours', value) }

    get taxDocumentNumber(): string { return this.get('taxDocumentNumber') }
    set taxDocumentNumber(value: string) { this.set('taxDocumentNumber', value) }

    // TBD - need to create BoletoConfig class
    // get boletoConfig(): BoletoConfig { return this.get('boletoConfig') }
    // set boletoConfig(value: BoletoConfig) { this.set('boletoConfig', value) }

    get lastUniqueOrderId(): number { return this.get('lastUniqueOrderId') }
    set lastUniqueOrderId(value: number) { this.set('lastUniqueOrderId', value) }

    get freightCalculation(): OmniChatSchema.FreightCalculation { return this.get('freightCalculation') }
    set freightCalculation(value: OmniChatSchema.FreightCalculation) { this.set('freightCalculation', value) }

    get whatsapp(): WhatsApp { return this.get('whatsapp') }
    set whatsapp(value: WhatsApp) { this.set('whatsapp', value) }

    // The unique Id used by omnichat integration to keep retailer in sync with the pipedrive related entry
    get pipeDriveOrganizationId(): string { return this.get('pipeDriveId') }
    set pipeDriveOrganizationId(value: string) { this.set('pipeDriveId', value) }



}

Parse.Object.registerSubclass('Retailer', Retailer);