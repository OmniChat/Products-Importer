import Parse = require("parse/node");
import { OmniChatSchema } from './Schema'
import { Chat } from './Chat';
import { User } from './User';
import { Order } from './Order';
import { Product } from './Product';
import { Variant } from './Variant';

export type MessageError = {
  code: number,
  message: string
}

export class Message extends Parse.Object {
  constructor(attributes?: any) {
    super('Message', attributes)
  }

  /** Time of update (epoch time in milliseconds) */
  get timestamp(): number { return this.get('timestamp') }
  set timestamp(value: number) { this.set('timestamp', value) }

  /** Sequence number */
  // get seq(): number { return this.get('seq') }
  // set seq(value: number) { this.set('seq', value) }

  /** Unique external message id */
  get externalId(): string { return this.get('externalId') }
  set externalId(value: string) { this.set('externalId', value) }

  /** Text of message */
  get text(): string { return this.get('text') }
  set text(value: string) { this.set('text', value) }

  /** Status of message */
  get status(): OmniChatSchema.MessageStatus { return this.get('status') }
  set status(value: OmniChatSchema.MessageStatus) { this.set('status', value) }

  /** Message sent automatically by omnichat */
  get system(): boolean { return this.get('system') }
  set system(value: boolean) { this.set('system', value) }

  /** The chat that message belongs to */
  get chat(): Chat { return this.get('chat') }
  set chat(value: Chat) { this.set('chat', value) }

  /** Type of message */
  get type(): OmniChatSchema.MessageType { return this.get('type') }
  set type(value: OmniChatSchema.MessageType) { this.set('type', value) }

  /** 
   * The message attachment. 
   * Only OUTGOING messages have this proporty set
   * */
  get attachment(): Parse.File { return this.get('attachment') }
  set attachment(value: Parse.File) { this.set('attachment', value) }

  /** 
   * The message attachment url
   * Only INCOMING messages have this proporty set
   * For OUTGOING messages use attachment
   */
  get attachmentUrl(): string { return this.get('attachmentUrl') }
  set attachmentUrl(value: string) { this.set('attachmentUrl', value) }

  /** 
   * The message attachment url
   * Only type === LOCATION
   */
  get location(): Parse.GeoPoint { return this.get('location') }
  set location(value: Parse.GeoPoint) { this.set('location', value) }

  /** The salesperson that sent this message */
  get salesPerson(): User { return this.get('salesPerson') }
  set salesPerson(value: User) { this.set('salesPerson', value) }

  /** The order related to this message when type === ORDER */
  get order(): Order { return this.get('order') }
  set order(value: Order) { this.set('order', value) }

  /** The product related to this message when type === PRODUCT */
  get product(): Product { return this.get('product') }
  set product(value: Product) { this.set('product', value) }

  /** The variant related to this message when type === VARIANT */
  get variant(): Variant { return this.get('variant') }
  set variant(value: Variant) { this.set('variant', value) }

  get error(): MessageError { return this.get('error') }
  set error(value: MessageError) { this.set('error', value) }
}

Parse.Object.registerSubclass('Message', Message);