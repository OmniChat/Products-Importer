import Parse = require("parse/node");
import { OmniChatSchema } from './Schema'

export class Variant extends Parse.Object {
  constructor(attributes?: any) {
    super('Variant', attributes)
  }

  get weight(): number { return this.get('weight') }
  set weight(value: number) { this.set('weight', value) }

  get length(): number { return this.get('length') }
  set length(value: number) { this.set('length', value) }

  get height(): number { return this.get('height') }
  set height(value: number) { this.set('height', value) }

  get width(): number { return this.get('width') }
  set width(value: number) { this.set('width', value) }

  get price(): number { return this.get('price') }
  set price(value: number) { this.set('price', value) }

  get salePrice(): number { return this.get('salePrice') }
  set salePrice(value: number) { this.set('salePrice', value) }

  get saleStartDate(): Date { return this.get('saleStartDate') }
  set saleStartDate(value: Date) { this.set('saleStartDate', value) }

  get saleEndDate(): Date { return this.get('saleEndDate') }
  set saleEndDate(value: Date) { this.set('saleEndDate', value) }

  get quantity(): number { return this.get('quantity') }
  set quantity(value: number) { this.set('quantity', value) }

  get erpId(): string { return this.get('erpId') }
  set erpId(value: string) { this.set('erpId', value) }

  get definition1Value(): string { return this.get('definition1Value') }
  set definition1Value(value: string) { this.set('definition1Value', value) }

  get definition2Value(): string { return this.get('definition2Value') }
  set definition2Value(value: string) { this.set('definition2Value', value) }

  get thumbnail(): Parse.File { return this.get('thumbnail') }
  set thumbnail(value: Parse.File) { this.set('thumbnail', value) }

  get image(): Parse.File { return this.get('image') }
  set image(value: Parse.File) { this.set('image', value) }

  get externalImageURL(): string { return this.get('externalImageURL') }
  set externalImageURL(value: string) { this.set('externalImageURL', value) }

  /** id referente a este objeto quando integrado com um gateway externo */
  get externalId(): string { return this.get('externalId') }
  set externalId(value: string) { this.set('externalId', value) }

  /** 
   * This variant will not be presented when showing available product variants
   * When undefined the variant is considered visible.
   * */
  get visible(): boolean { return this.get('visible') }
  set visible(value: boolean) { this.set('visible', value) }

  imageUrl(): string {
    let image;
    if (this.externalImageURL) {
      image = this.externalImageURL;
    } else if (this.image) {
      image = this.image.url()
    }
    return image
  }

  thumbnailUrl(): string {
    let image;
    if (this.externalImageURL) {
      image = this.externalImageURL;
    } else if (this.thumbnail) {
      image = this.thumbnail.url()
    }
    return image
  }
}

Parse.Object.registerSubclass('Variant', Variant);